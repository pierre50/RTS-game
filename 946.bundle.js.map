{"version":3,"file":"946.bundle.js","mappings":"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","sources":["webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/shader/UboSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uboSyncFunctions.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/container/CustomRenderPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/container/utils/executeInstructions.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/container/RenderGroupPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/container/utils/clearList.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/container/utils/updateRenderGroupTransforms.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/container/RenderGroupSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/container/utils/validateRenderables.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite/SpritePipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/batcher/shared/BatcherPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/filters/mask/mask.wgsl.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/filters/mask/MaskFilter.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/filters/mask/mask.vert.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/filters/mask/mask.frag.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/mask/alpha/AlphaMaskPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/mask/color/ColorMaskPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/mask/stencil/StencilMaskPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/background/BackgroundSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/blendModes/BlendModePipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/extract/ExtractSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderTexture.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/extract/GenerateTextureSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/GlobalUniformSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/SchedulerSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/utils/sayHello.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/startup/HelloSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/utils/data/clean.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderableGCSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureGCSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/view/ViewSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/system/SharedSystems.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uniformParsers.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/ensureAttributes.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/high-shader/shader-bits/textureBit.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTargetSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/isRenderingToScreen.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/calculateProjection.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/buffer/BufferResource.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/createUboSyncFunction.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStencilModesToPixi.mjs"],"sourcesContent":["import { GlobalResourceRegistry } from '../../../../../utils/pool/GlobalResourceRegistry.mjs';\nimport { CanvasSource } from '../sources/CanvasSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\n\"use strict\";\nconst canvasCache = /* @__PURE__ */ new Map();\nGlobalResourceRegistry.register(canvasCache);\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new Texture({\n      source: new CanvasSource({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once(\"destroy\", onDestroy);\n    texture.source.once(\"destroy\", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\n\nexport { getCanvasTexture, hasCachedCanvasTexture };\n//# sourceMappingURL=getCanvasTexture.mjs.map\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { BufferUsage } from '../buffer/const.mjs';\n\n\"use strict\";\nclass UboSystem {\n  constructor(adaptor) {\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    this._syncFunctionHash = /* @__PURE__ */ Object.create(null);\n    this._adaptor = adaptor;\n    this._systemCheck();\n  }\n  /**\n   * Overridable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   */\n  _systemCheck() {\n    if (!unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n  }\n  ensureUniformGroup(uniformGroup) {\n    const uniformData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n  }\n  getUniformGroupData(uniformGroup) {\n    return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n  }\n  _initUniformGroup(uniformGroup) {\n    const uniformGroupSignature = uniformGroup._signature;\n    let uniformData = this._syncFunctionHash[uniformGroupSignature];\n    if (!uniformData) {\n      const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n      const layout = this._adaptor.createUboElements(elements);\n      const syncFunction = this._generateUboSync(layout.uboElements);\n      uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n        layout,\n        syncFunction\n      };\n    }\n    return this._syncFunctionHash[uniformGroupSignature];\n  }\n  _generateUboSync(uboElements) {\n    return this._adaptor.generateUboSync(uboElements);\n  }\n  syncUniformGroup(uniformGroup, data, offset) {\n    const uniformGroupData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformGroupData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n    let dataInt32 = null;\n    if (!data) {\n      data = uniformGroup.buffer.data;\n      dataInt32 = uniformGroup.buffer.dataInt32;\n    }\n    offset || (offset = 0);\n    uniformGroupData.syncFunction(uniformGroup.uniforms, data, dataInt32, offset);\n    return true;\n  }\n  updateUniformGroup(uniformGroup) {\n    if (uniformGroup.isStatic && !uniformGroup._dirtyId)\n      return false;\n    uniformGroup._dirtyId = 0;\n    const synced = this.syncUniformGroup(uniformGroup);\n    uniformGroup.buffer.update();\n    return synced;\n  }\n  destroy() {\n    this._syncFunctionHash = null;\n  }\n}\n\nexport { UboSystem };\n//# sourceMappingURL=UboSystem.mjs.map\n","\"use strict\";\nfunction loopMatrix(col, row) {\n  const total = col * row;\n  return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\nconst uboSyncFunctionsSTD40 = {\n  f32: `\n        data[offset] = v;`,\n  i32: `\n        dataInt32[offset] = v;`,\n  \"vec2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n  \"vec3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n  \"vec4<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n  \"vec2<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];`,\n  \"vec3<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];`,\n  \"vec4<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];\n        dataInt32[offset + 3] = v[3];`,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n  \"mat3x3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n  \"mat4x4<f32>\": `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n  \"mat3x2<f32>\": loopMatrix(3, 2),\n  \"mat4x2<f32>\": loopMatrix(4, 2),\n  \"mat2x3<f32>\": loopMatrix(2, 3),\n  \"mat4x3<f32>\": loopMatrix(4, 3),\n  \"mat2x4<f32>\": loopMatrix(2, 4),\n  \"mat3x4<f32>\": loopMatrix(3, 4)\n};\nconst uboSyncFunctionsWGSL = {\n  ...uboSyncFunctionsSTD40,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `\n};\n\nexport { uboSyncFunctionsSTD40, uboSyncFunctionsWGSL };\n//# sourceMappingURL=uboSyncFunctions.mjs.map\n","\"use strict\";\nclass BatchableSprite {\n  constructor() {\n    this.batcherName = \"default\";\n    this.topology = \"triangle-list\";\n    // batch specific..\n    this.attributeSize = 4;\n    this.indexSize = 6;\n    this.packAsQuad = true;\n    this.roundPixels = 0;\n    this._attributeStart = 0;\n    // location in the buffer\n    this._batcher = null;\n    this._batch = null;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.bounds = null;\n  }\n  destroy() {\n  }\n}\n\nexport { BatchableSprite };\n//# sourceMappingURL=BatchableSprite.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass CustomRenderPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  updateRenderable() {\n  }\n  destroyRenderable() {\n  }\n  validateRenderable() {\n    return false;\n  }\n  addRenderable(container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(container);\n  }\n  execute(container) {\n    if (!container.isRenderable)\n      return;\n    container.render(this._renderer);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nCustomRenderPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"customRender\"\n};\n\nexport { CustomRenderPipe };\n//# sourceMappingURL=CustomRenderPipe.mjs.map\n","\"use strict\";\nfunction executeInstructions(renderGroup, renderer) {\n  const instructionSet = renderGroup.instructionSet;\n  const instructions = instructionSet.instructions;\n  for (let i = 0; i < instructionSet.instructionSize; i++) {\n    const instruction = instructions[i];\n    renderer[instruction.renderPipeId].execute(instruction);\n  }\n}\n\nexport { executeInstructions };\n//# sourceMappingURL=executeInstructions.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderGroup(renderGroup, instructionSet) {\n    if (renderGroup.isCachedAsTexture) {\n      this._addRenderableCacheAsTexture(renderGroup, instructionSet);\n    } else {\n      this._addRenderableDirect(renderGroup, instructionSet);\n    }\n  }\n  execute(renderGroup) {\n    if (!renderGroup.isRenderable)\n      return;\n    if (renderGroup.isCachedAsTexture) {\n      this._executeCacheAsTexture(renderGroup);\n    } else {\n      this._executeDirect(renderGroup);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _addRenderableDirect(renderGroup, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    if (renderGroup._batchableRenderGroup) {\n      BigPool.return(renderGroup._batchableRenderGroup);\n      renderGroup._batchableRenderGroup = null;\n    }\n    instructionSet.add(renderGroup);\n  }\n  _addRenderableCacheAsTexture(renderGroup, instructionSet) {\n    const batchableRenderGroup = renderGroup._batchableRenderGroup ?? (renderGroup._batchableRenderGroup = BigPool.get(BatchableSprite));\n    batchableRenderGroup.renderable = renderGroup.root;\n    batchableRenderGroup.transform = renderGroup.root.relativeGroupTransform;\n    batchableRenderGroup.texture = renderGroup.texture;\n    batchableRenderGroup.bounds = renderGroup._textureBounds;\n    instructionSet.add(renderGroup);\n    this._renderer.renderPipes.blendMode.pushBlendMode(renderGroup, renderGroup.root.groupBlendMode, instructionSet);\n    this._renderer.renderPipes.batch.addToBatch(batchableRenderGroup, instructionSet);\n    this._renderer.renderPipes.blendMode.popBlendMode(instructionSet);\n  }\n  _executeCacheAsTexture(renderGroup) {\n    if (renderGroup.textureNeedsUpdate) {\n      renderGroup.textureNeedsUpdate = false;\n      const worldTransformMatrix = tempMatrix.identity().translate(\n        -renderGroup._textureBounds.x,\n        -renderGroup._textureBounds.y\n      );\n      this._renderer.renderTarget.push(renderGroup.texture, true, null, renderGroup.texture.frame);\n      this._renderer.globalUniforms.push({\n        worldTransformMatrix,\n        worldColor: 4294967295,\n        offset: { x: 0, y: 0 }\n      });\n      executeInstructions(renderGroup, this._renderer.renderPipes);\n      this._renderer.renderTarget.finishRenderPass();\n      this._renderer.renderTarget.pop();\n      this._renderer.globalUniforms.pop();\n    }\n    renderGroup._batchableRenderGroup._batcher.updateElement(renderGroup._batchableRenderGroup);\n    renderGroup._batchableRenderGroup._batcher.geometry.buffers[0].update();\n  }\n  _executeDirect(renderGroup) {\n    this._renderer.globalUniforms.push({\n      worldTransformMatrix: renderGroup.inverseParentTextureTransform,\n      worldColor: renderGroup.worldColorAlpha\n    });\n    executeInstructions(renderGroup, this._renderer.renderPipes);\n    this._renderer.globalUniforms.pop();\n  }\n}\nRenderGroupPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupPipe };\n//# sourceMappingURL=RenderGroupPipe.mjs.map\n","\"use strict\";\nfunction clearList(list, index) {\n  index || (index = 0);\n  for (let j = index; j < list.length; j++) {\n    if (list[j]) {\n      list[j] = null;\n    } else {\n      break;\n    }\n  }\n}\n\nexport { clearList };\n//# sourceMappingURL=clearList.mjs.map\n","import { Container, UPDATE_VISIBLE, UPDATE_COLOR, UPDATE_BLEND } from '../Container.mjs';\nimport { clearList } from './clearList.mjs';\nimport { multiplyColors } from './multiplyColors.mjs';\n\n\"use strict\";\nconst tempContainer = new Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = UPDATE_VISIBLE | UPDATE_COLOR | UPDATE_BLEND;\nfunction updateRenderGroupTransforms(renderGroup, updateChildRenderGroups = false) {\n  updateRenderGroupTransform(renderGroup);\n  const childrenToUpdate = renderGroup.childrenToUpdate;\n  const updateTick = renderGroup.updateTick++;\n  for (const j in childrenToUpdate) {\n    const renderGroupDepth = Number(j);\n    const childrenAtDepth = childrenToUpdate[j];\n    const list = childrenAtDepth.list;\n    const index = childrenAtDepth.index;\n    for (let i = 0; i < index; i++) {\n      const child = list[i];\n      if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth) {\n        updateTransformAndChildren(child, updateTick, 0);\n      }\n    }\n    clearList(list, index);\n    childrenAtDepth.index = 0;\n  }\n  if (updateChildRenderGroups) {\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n    }\n  }\n}\nfunction updateRenderGroupTransform(renderGroup) {\n  const root = renderGroup.root;\n  let worldAlpha;\n  if (renderGroup.renderGroupParent) {\n    const renderGroupParent = renderGroup.renderGroupParent;\n    renderGroup.worldTransform.appendFrom(\n      root.relativeGroupTransform,\n      renderGroupParent.worldTransform\n    );\n    renderGroup.worldColor = multiplyColors(\n      root.groupColor,\n      renderGroupParent.worldColor\n    );\n    worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n  } else {\n    renderGroup.worldTransform.copyFrom(root.localTransform);\n    renderGroup.worldColor = root.localColor;\n    worldAlpha = root.localAlpha;\n  }\n  worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n  renderGroup.worldAlpha = worldAlpha;\n  renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction updateTransformAndChildren(container, updateTick, updateFlags) {\n  if (updateTick === container.updateTick)\n    return;\n  container.updateTick = updateTick;\n  container.didChange = false;\n  const localTransform = container.localTransform;\n  container.updateLocalTransform();\n  const parent = container.parent;\n  if (parent && !parent.renderGroup) {\n    updateFlags |= container._updateFlags;\n    container.relativeGroupTransform.appendFrom(\n      localTransform,\n      parent.relativeGroupTransform\n    );\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, parent, updateFlags);\n    }\n  } else {\n    updateFlags = container._updateFlags;\n    container.relativeGroupTransform.copyFrom(localTransform);\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, tempContainer, updateFlags);\n    }\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      updateTransformAndChildren(children[i], updateTick, updateFlags);\n    }\n    const renderGroup = container.parentRenderGroup;\n    const renderable = container;\n    if (renderable.renderPipeId && !renderGroup.structureDidChange) {\n      renderGroup.updateRenderable(renderable);\n    }\n  }\n}\nfunction updateColorBlendVisibility(container, parent, updateFlags) {\n  if (updateFlags & UPDATE_COLOR) {\n    container.groupColor = multiplyColors(\n      container.localColor,\n      parent.groupColor\n    );\n    let groupAlpha = container.localAlpha * parent.groupAlpha;\n    groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n    container.groupAlpha = groupAlpha;\n    container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n  }\n  if (updateFlags & UPDATE_BLEND) {\n    container.groupBlendMode = container.localBlendMode === \"inherit\" ? parent.groupBlendMode : container.localBlendMode;\n  }\n  if (updateFlags & UPDATE_VISIBLE) {\n    container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n  }\n  container._updateFlags = 0;\n}\n\nexport { updateRenderGroupTransform, updateRenderGroupTransforms, updateTransformAndChildren };\n//# sourceMappingURL=updateRenderGroupTransforms.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { TextureStyle } from '../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport { Bounds } from './bounds/Bounds.mjs';\nimport { clearList } from './utils/clearList.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms.mjs';\nimport { validateRenderables } from './utils/validateRenderables.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  render({ container, transform }) {\n    const parent = container.parent;\n    const renderGroupParent = container.renderGroup.renderGroupParent;\n    container.parent = null;\n    container.renderGroup.renderGroupParent = null;\n    const renderer = this._renderer;\n    const originalLocalTransform = tempMatrix;\n    if (transform) {\n      originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n      container.renderGroup.localTransform.copyFrom(transform);\n    }\n    const renderPipes = renderer.renderPipes;\n    this._updateCachedRenderGroups(container.renderGroup, null);\n    this._updateRenderGroups(container.renderGroup);\n    renderer.globalUniforms.start({\n      worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n      worldColor: container.renderGroup.worldColorAlpha\n    });\n    executeInstructions(container.renderGroup, renderPipes);\n    if (renderPipes.uniformBatch) {\n      renderPipes.uniformBatch.renderEnd();\n    }\n    if (transform) {\n      container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n    }\n    container.parent = parent;\n    container.renderGroup.renderGroupParent = renderGroupParent;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _updateCachedRenderGroups(renderGroup, closestCacheAsTexture) {\n    renderGroup._parentCacheAsTextureRenderGroup = closestCacheAsTexture;\n    if (renderGroup.isCachedAsTexture) {\n      if (!renderGroup.textureNeedsUpdate)\n        return;\n      closestCacheAsTexture = renderGroup;\n    }\n    for (let i = renderGroup.renderGroupChildren.length - 1; i >= 0; i--) {\n      this._updateCachedRenderGroups(renderGroup.renderGroupChildren[i], closestCacheAsTexture);\n    }\n    renderGroup.invalidateMatrices();\n    if (renderGroup.isCachedAsTexture) {\n      if (renderGroup.textureNeedsUpdate) {\n        const bounds = renderGroup.root.getLocalBounds();\n        bounds.ceil();\n        const lastTexture = renderGroup.texture;\n        if (renderGroup.texture) {\n          TexturePool.returnTexture(renderGroup.texture, true);\n        }\n        const renderer = this._renderer;\n        const resolution = renderGroup.textureOptions.resolution || renderer.view.resolution;\n        const antialias = renderGroup.textureOptions.antialias ?? renderer.view.antialias;\n        const scaleMode = renderGroup.textureOptions.scaleMode ?? \"linear\";\n        const texture = TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          resolution,\n          antialias\n        );\n        texture._source.style = new TextureStyle({ scaleMode });\n        renderGroup.texture = texture;\n        renderGroup._textureBounds || (renderGroup._textureBounds = new Bounds());\n        renderGroup._textureBounds.copyFrom(bounds);\n        if (lastTexture !== renderGroup.texture) {\n          if (renderGroup.renderGroupParent) {\n            renderGroup.renderGroupParent.structureDidChange = true;\n          }\n        }\n      }\n    } else if (renderGroup.texture) {\n      TexturePool.returnTexture(renderGroup.texture, true);\n      renderGroup.texture = null;\n    }\n  }\n  _updateRenderGroups(renderGroup) {\n    const renderer = this._renderer;\n    const renderPipes = renderer.renderPipes;\n    renderGroup.runOnRender(renderer);\n    renderGroup.instructionSet.renderPipes = renderPipes;\n    if (!renderGroup.structureDidChange) {\n      validateRenderables(renderGroup, renderPipes);\n    } else {\n      clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n    }\n    updateRenderGroupTransforms(renderGroup);\n    if (renderGroup.structureDidChange) {\n      renderGroup.structureDidChange = false;\n      this._buildInstructions(renderGroup, renderer);\n    } else {\n      this._updateRenderables(renderGroup);\n    }\n    renderGroup.childrenRenderablesToUpdate.index = 0;\n    renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n    if (renderGroup.isCachedAsTexture && !renderGroup.textureNeedsUpdate)\n      return;\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      this._updateRenderGroups(renderGroup.renderGroupChildren[i]);\n    }\n  }\n  _updateRenderables(renderGroup) {\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n    for (let i = 0; i < index; i++) {\n      const container = list[i];\n      if (container.didViewUpdate) {\n        renderGroup.updateRenderable(container);\n      }\n    }\n    clearList(list, index);\n  }\n  _buildInstructions(renderGroup, rendererOrPipes) {\n    const root = renderGroup.root;\n    const instructionSet = renderGroup.instructionSet;\n    instructionSet.reset();\n    const renderer = rendererOrPipes.renderPipes ? rendererOrPipes : rendererOrPipes.batch.renderer;\n    const renderPipes = renderer.renderPipes;\n    renderPipes.batch.buildStart(instructionSet);\n    renderPipes.blendMode.buildStart();\n    renderPipes.colorMask.buildStart();\n    if (root.sortableChildren) {\n      root.sortChildren();\n    }\n    root.collectRenderablesWithEffects(instructionSet, renderer, null);\n    renderPipes.batch.buildEnd(instructionSet);\n    renderPipes.blendMode.buildEnd(instructionSet);\n  }\n}\n/** @ignore */\nRenderGroupSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupSystem };\n//# sourceMappingURL=RenderGroupSystem.mjs.map\n","\"use strict\";\nfunction validateRenderables(renderGroup, renderPipes) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  let rebuildRequired = false;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    const renderable = container;\n    const pipe = renderPipes[renderable.renderPipeId];\n    rebuildRequired = pipe.validateRenderable(container);\n    if (rebuildRequired) {\n      break;\n    }\n  }\n  renderGroup.structureDidChange = rebuildRequired;\n  return rebuildRequired;\n}\n\nexport { validateRenderables };\n//# sourceMappingURL=validateRenderables.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BatchableSprite } from './BatchableSprite.mjs';\n\n\"use strict\";\nclass SpritePipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.bounds = sprite.visualBounds;\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return sprite._gpuData[this._renderer.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableSprite = new BatchableSprite();\n    batchableSprite.renderable = sprite;\n    batchableSprite.transform = sprite.groupTransform;\n    batchableSprite.texture = sprite._texture;\n    batchableSprite.bounds = sprite.visualBounds;\n    batchableSprite.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    sprite._gpuData[this._renderer.uid] = batchableSprite;\n    return batchableSprite;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"sprite\"\n};\n\nexport { SpritePipe };\n//# sourceMappingURL=SpritePipe.mjs.map\n","import { ExtensionType, extensions } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { DefaultBatcher } from './DefaultBatcher.mjs';\n\n\"use strict\";\nconst _BatcherPipe = class _BatcherPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._batchersByInstructionSet = /* @__PURE__ */ Object.create(null);\n    /** A record of all active batchers, keyed by their names */\n    this._activeBatches = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init?.(this);\n  }\n  static getBatcher(name) {\n    return new this._availableBatchers[name]();\n  }\n  buildStart(instructionSet) {\n    let batchers = this._batchersByInstructionSet[instructionSet.uid];\n    if (!batchers) {\n      batchers = this._batchersByInstructionSet[instructionSet.uid] = /* @__PURE__ */ Object.create(null);\n      batchers.default || (batchers.default = new DefaultBatcher({\n        maxTextures: this.renderer.limits.maxBatchableTextures\n      }));\n    }\n    this._activeBatches = batchers;\n    this._activeBatch = this._activeBatches.default;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].begin();\n    }\n  }\n  addToBatch(batchableObject, instructionSet) {\n    if (this._activeBatch.name !== batchableObject.batcherName) {\n      this._activeBatch.break(instructionSet);\n      let batch = this._activeBatches[batchableObject.batcherName];\n      if (!batch) {\n        batch = this._activeBatches[batchableObject.batcherName] = _BatcherPipe.getBatcher(batchableObject.batcherName);\n        batch.begin();\n      }\n      this._activeBatch = batch;\n    }\n    this._activeBatch.add(batchableObject);\n  }\n  break(instructionSet) {\n    this._activeBatch.break(instructionSet);\n  }\n  buildEnd(instructionSet) {\n    this._activeBatch.break(instructionSet);\n    const batches = this._activeBatches;\n    for (const i in batches) {\n      const batch = batches[i];\n      const geometry = batch.geometry;\n      geometry.indexBuffer.setDataWithSize(batch.indexBuffer, batch.indexSize, true);\n      geometry.buffers[0].setDataWithSize(batch.attributeBuffer.float32View, batch.attributeSize, false);\n    }\n  }\n  upload(instructionSet) {\n    const batchers = this._batchersByInstructionSet[instructionSet.uid];\n    for (const i in batchers) {\n      const batcher = batchers[i];\n      const geometry = batcher.geometry;\n      if (batcher.dirty) {\n        batcher.dirty = false;\n        geometry.buffers[0].update(batcher.attributeSize * 4);\n      }\n    }\n  }\n  execute(batch) {\n    if (batch.action === \"startBatch\") {\n      const batcher = batch.batcher;\n      const geometry = batcher.geometry;\n      const shader = batcher.shader;\n      this._adaptor.start(this, geometry, shader);\n    }\n    this._adaptor.execute(this, batch);\n  }\n  destroy() {\n    this.state = null;\n    this.renderer = null;\n    this._adaptor = null;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].destroy();\n    }\n    this._activeBatches = null;\n  }\n};\n/** @ignore */\n_BatcherPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"batch\"\n};\n_BatcherPipe._availableBatchers = /* @__PURE__ */ Object.create(null);\nlet BatcherPipe = _BatcherPipe;\nextensions.handleByMap(ExtensionType.Batcher, BatcherPipe._availableBatchers);\nextensions.add(DefaultBatcher);\n\nexport { BatcherPipe };\n//# sourceMappingURL=BatcherPipe.mjs.map\n","var source = \"struct GlobalFilterUniforms {\\n  uInputSize:vec4<f32>,\\n  uInputPixel:vec4<f32>,\\n  uInputClamp:vec4<f32>,\\n  uOutputFrame:vec4<f32>,\\n  uGlobalFrame:vec4<f32>,\\n  uOutputTexture:vec4<f32>,\\n};\\n\\nstruct MaskUniforms {\\n  uFilterMatrix:mat3x3<f32>,\\n  uMaskClamp:vec4<f32>,\\n  uAlpha:f32,\\n  uInverse:f32,\\n};\\n\\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\\n@group(0) @binding(2) var uSampler : sampler;\\n\\n@group(1) @binding(0) var<uniform> filterUniforms : MaskUniforms;\\n@group(1) @binding(1) var uMaskTexture: texture_2d<f32>;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) filterUv : vec2<f32>,\\n};\\n\\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\\n{\\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\\n\\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\\n}\\n\\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);\\n}\\n\\nfn getFilterCoord(aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return ( filterUniforms.uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}\\n\\nfn getSize() -> vec2<f32>\\n{\\n  return gfu.uGlobalFrame.zw;\\n}\\n\\n@vertex\\nfn mainVertex(\\n  @location(0) aPosition : vec2<f32>,\\n) -> VSOutput {\\n  return VSOutput(\\n   filterVertexPosition(aPosition),\\n   filterTextureCoord(aPosition),\\n   getFilterCoord(aPosition)\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) filterUv: vec2<f32>,\\n  @builtin(position) position: vec4<f32>\\n) -> @location(0) vec4<f32> {\\n\\n    var maskClamp = filterUniforms.uMaskClamp;\\n    var uAlpha = filterUniforms.uAlpha;\\n\\n    var clip = step(3.5,\\n      step(maskClamp.x, filterUv.x) +\\n      step(maskClamp.y, filterUv.y) +\\n      step(filterUv.x, maskClamp.z) +\\n      step(filterUv.y, maskClamp.w));\\n\\n    var mask = textureSample(uMaskTexture, uSampler, filterUv);\\n    var source = textureSample(uTexture, uSampler, uv);\\n    var alphaMul = 1.0 - uAlpha * (1.0 - mask.a);\\n\\n    var a: f32 = alphaMul * mask.r * uAlpha * clip;\\n\\n    if (filterUniforms.uInverse == 1.0) {\\n        a = 1.0 - a;\\n    }\\n\\n    return source * a;\\n}\\n\";\n\nexport { source as default };\n//# sourceMappingURL=mask.wgsl.mjs.map\n","import { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix.mjs';\nimport { Filter } from '../Filter.mjs';\nimport fragment from './mask.frag.mjs';\nimport vertex from './mask.vert.mjs';\nimport source from './mask.wgsl.mjs';\n\n\"use strict\";\nclass MaskFilter extends Filter {\n  constructor(options) {\n    const { sprite, ...rest } = options;\n    const textureMatrix = new TextureMatrix(sprite.texture);\n    const filterUniforms = new UniformGroup({\n      uFilterMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uMaskClamp: { value: textureMatrix.uClampFrame, type: \"vec4<f32>\" },\n      uAlpha: { value: 1, type: \"f32\" },\n      uInverse: { value: options.inverse ? 1 : 0, type: \"f32\" }\n    });\n    const gpuProgram = GpuProgram.from({\n      vertex: {\n        source,\n        entryPoint: \"mainVertex\"\n      },\n      fragment: {\n        source,\n        entryPoint: \"mainFragment\"\n      }\n    });\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment,\n      name: \"mask-filter\"\n    });\n    super({\n      ...rest,\n      gpuProgram,\n      glProgram,\n      clipToViewport: false,\n      resources: {\n        filterUniforms,\n        uMaskTexture: sprite.texture.source\n      }\n    });\n    this.sprite = sprite;\n    this._textureMatrix = textureMatrix;\n  }\n  set inverse(value) {\n    this.resources.filterUniforms.uniforms.uInverse = value ? 1 : 0;\n  }\n  get inverse() {\n    return this.resources.filterUniforms.uniforms.uInverse === 1;\n  }\n  apply(filterManager, input, output, clearMode) {\n    this._textureMatrix.texture = this.sprite.texture;\n    filterManager.calculateSpriteMatrix(\n      this.resources.filterUniforms.uniforms.uFilterMatrix,\n      this.sprite\n    ).prepend(this._textureMatrix.mapCoord);\n    this.resources.uMaskTexture = this.sprite.texture.source;\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n}\n\nexport { MaskFilter };\n//# sourceMappingURL=MaskFilter.mjs.map\n","var vertex = \"in vec2 aPosition;\\n\\nout vec2 vTextureCoord;\\nout vec2 vMaskCoord;\\n\\n\\nuniform vec4 uInputSize;\\nuniform vec4 uOutputFrame;\\nuniform vec4 uOutputTexture;\\nuniform mat3 uFilterMatrix;\\n\\nvec4 filterVertexPosition(  vec2 aPosition )\\n{\\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\\n       \\n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord(  vec2 aPosition )\\n{\\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\\n}\\n\\nvec2 getFilterCoord( vec2 aPosition )\\n{\\n    return  ( uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}   \\n\\nvoid main(void)\\n{\\n    gl_Position = filterVertexPosition(aPosition);\\n    vTextureCoord = filterTextureCoord(aPosition);\\n    vMaskCoord = getFilterCoord(aPosition);\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=mask.vert.mjs.map\n","var fragment = \"in vec2 vMaskCoord;\\nin vec2 vTextureCoord;\\n\\nuniform sampler2D uTexture;\\nuniform sampler2D uMaskTexture;\\n\\nuniform float uAlpha;\\nuniform vec4 uMaskClamp;\\nuniform float uInverse;\\n\\nout vec4 finalColor;\\n\\nvoid main(void)\\n{\\n    float clip = step(3.5,\\n        step(uMaskClamp.x, vMaskCoord.x) +\\n        step(uMaskClamp.y, vMaskCoord.y) +\\n        step(vMaskCoord.x, uMaskClamp.z) +\\n        step(vMaskCoord.y, uMaskClamp.w));\\n\\n    // TODO look into why this is needed\\n    float npmAlpha = uAlpha;\\n    vec4 original = texture(uTexture, vTextureCoord);\\n    vec4 masky = texture(uMaskTexture, vMaskCoord);\\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\\n\\n    float a = alphaMul * masky.r * npmAlpha * clip;\\n\\n    if (uInverse == 1.0) {\\n        a = 1.0 - a;\\n    }\\n\\n    finalColor = original * a;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=mask.frag.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../filters/FilterEffect.mjs';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter.mjs';\nimport { Bounds } from '../../../scene/container/bounds/Bounds.mjs';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds.mjs';\nimport { Sprite } from '../../../scene/sprite/Sprite.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../renderers/types.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nclass AlphaMaskEffect extends FilterEffect {\n  constructor() {\n    super();\n    this.filters = [new MaskFilter({\n      sprite: new Sprite(Texture.EMPTY),\n      inverse: false,\n      resolution: \"inherit\",\n      antialias: \"inherit\"\n    })];\n  }\n  get sprite() {\n    return this.filters[0].sprite;\n  }\n  set sprite(value) {\n    this.filters[0].sprite = value;\n  }\n  get inverse() {\n    return this.filters[0].inverse;\n  }\n  set inverse(value) {\n    this.filters[0].inverse = value;\n  }\n}\nclass AlphaMaskPipe {\n  constructor(renderer) {\n    this._activeMaskStage = [];\n    this._renderer = renderer;\n  }\n  push(mask, maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      inverse: maskedContainer._maskOptions.inverse,\n      canBundle: false,\n      maskedContainer\n    });\n    mask.inverse = maskedContainer._maskOptions.inverse;\n    if (mask.renderMaskToTexture) {\n      const maskContainer = mask.mask;\n      maskContainer.includeInBuild = true;\n      maskContainer.collectRenderables(\n        instructionSet,\n        renderer,\n        null\n      );\n      maskContainer.includeInBuild = false;\n    }\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      maskedContainer,\n      inverse: maskedContainer._maskOptions.inverse,\n      canBundle: false\n    });\n  }\n  pop(mask, _maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"popMaskEnd\",\n      mask,\n      inverse: _maskedContainer._maskOptions.inverse,\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    const renderMask = instruction.mask.renderMaskToTexture;\n    if (instruction.action === \"pushMaskBegin\") {\n      const filterEffect = BigPool.get(AlphaMaskEffect);\n      filterEffect.inverse = instruction.inverse;\n      if (renderMask) {\n        instruction.mask.mask.measurable = true;\n        const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n        instruction.mask.mask.measurable = false;\n        bounds.ceil();\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n        const filterTexture = TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          colorTextureSource._resolution,\n          colorTextureSource.antialias\n        );\n        renderer.renderTarget.push(filterTexture, true);\n        renderer.globalUniforms.push({\n          offset: bounds,\n          worldColor: 4294967295\n        });\n        const sprite = filterEffect.sprite;\n        sprite.texture = filterTexture;\n        sprite.worldTransform.tx = bounds.minX;\n        sprite.worldTransform.ty = bounds.minY;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer,\n          filterTexture\n        });\n      } else {\n        filterEffect.sprite = instruction.mask.mask;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer\n        });\n      }\n    } else if (instruction.action === \"pushMaskEnd\") {\n      const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n      if (renderMask) {\n        if (renderer.type === RendererType.WEBGL) {\n          renderer.renderTarget.finishRenderPass();\n        }\n        renderer.renderTarget.pop();\n        renderer.globalUniforms.pop();\n      }\n      renderer.filter.push({\n        renderPipeId: \"filter\",\n        action: \"pushFilter\",\n        container: maskData.maskedContainer,\n        filterEffect: maskData.filterEffect,\n        canBundle: false\n      });\n    } else if (instruction.action === \"popMaskEnd\") {\n      renderer.filter.pop();\n      const maskData = this._activeMaskStage.pop();\n      if (renderMask) {\n        TexturePool.returnTexture(maskData.filterTexture);\n      }\n      BigPool.return(maskData.filterEffect);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n    this._activeMaskStage = null;\n  }\n}\n/** @ignore */\nAlphaMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"alphaMask\"\n};\n\nexport { AlphaMaskPipe };\n//# sourceMappingURL=AlphaMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ColorMaskPipe {\n  constructor(renderer) {\n    this._colorStack = [];\n    this._colorStackIndex = 0;\n    this._currentColor = 0;\n    this._renderer = renderer;\n  }\n  buildStart() {\n    this._colorStack[0] = 15;\n    this._colorStackIndex = 1;\n    this._currentColor = 15;\n  }\n  push(mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & mask.mask;\n    const currentColor = this._colorStack[this._colorStackIndex];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n    this._colorStackIndex++;\n  }\n  pop(_mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    this._colorStackIndex--;\n    const currentColor = colorStack[this._colorStackIndex - 1];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    renderer.colorMask.setMask(instruction.colorMask);\n  }\n  destroy() {\n    this._renderer = null;\n    this._colorStack = null;\n  }\n}\n/** @ignore */\nColorMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"colorMask\"\n};\n\nexport { ColorMaskPipe };\n//# sourceMappingURL=ColorMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { CLEAR } from '../../renderers/gl/const.mjs';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const.mjs';\n\n\"use strict\";\nclass StencilMaskPipe {\n  constructor(renderer) {\n    // used when building and also when executing..\n    this._maskStackHash = {};\n    this._maskHash = /* @__PURE__ */ new WeakMap();\n    this._renderer = renderer;\n  }\n  push(mask, _container, instructionSet) {\n    var _a;\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      inverse: _container._maskOptions.inverse,\n      canBundle: false\n    });\n    const maskContainer = effect.mask;\n    maskContainer.includeInBuild = true;\n    if (!this._maskHash.has(effect)) {\n      this._maskHash.set(effect, {\n        instructionsStart: 0,\n        instructionsLength: 0\n      });\n    }\n    const maskData = this._maskHash.get(effect);\n    maskData.instructionsStart = instructionSet.instructionSize;\n    maskContainer.collectRenderables(\n      instructionSet,\n      renderer,\n      null\n    );\n    maskContainer.includeInBuild = false;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      inverse: _container._maskOptions.inverse,\n      canBundle: false\n    });\n    const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n    maskData.instructionsLength = instructionsLength;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n  }\n  pop(mask, _container, instructionSet) {\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskBegin\",\n      inverse: _container._maskOptions.inverse,\n      canBundle: false\n    });\n    const maskData = this._maskHash.get(mask);\n    for (let i = 0; i < maskData.instructionsLength; i++) {\n      instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n    }\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskEnd\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    var _a;\n    const renderer = this._renderer;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    let maskStackIndex = (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n    if (instruction.action === \"pushMaskBegin\") {\n      renderer.renderTarget.ensureDepthStencil();\n      renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n      maskStackIndex++;\n      renderer.colorMask.setMask(0);\n    } else if (instruction.action === \"pushMaskEnd\") {\n      if (instruction.inverse) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n      } else {\n        renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      }\n      renderer.colorMask.setMask(15);\n    } else if (instruction.action === \"popMaskBegin\") {\n      renderer.colorMask.setMask(0);\n      if (maskStackIndex !== 0) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n      } else {\n        renderer.renderTarget.clear(null, CLEAR.STENCIL);\n        renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n      }\n      maskStackIndex--;\n    } else if (instruction.action === \"popMaskEnd\") {\n      if (instruction.inverse) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n      } else {\n        renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      }\n      renderer.colorMask.setMask(15);\n    }\n    this._maskStackHash[renderTargetUid] = maskStackIndex;\n  }\n  destroy() {\n    this._renderer = null;\n    this._maskStackHash = null;\n    this._maskHash = null;\n  }\n}\nStencilMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"stencilMask\"\n};\n\nexport { StencilMaskPipe };\n//# sourceMappingURL=StencilMaskPipe.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst _BackgroundSystem = class _BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = new Color(0);\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  /**\n   * initiates the background system\n   * @param options - the options for the background colors\n   */\n  init(options) {\n    options = { ..._BackgroundSystem.defaultOptions, ...options };\n    this.clearBeforeRender = options.clearBeforeRender;\n    this.color = options.background || options.backgroundColor || this._backgroundColor;\n    this.alpha = options.backgroundAlpha;\n    this._backgroundColor.setAlpha(options.backgroundAlpha);\n  }\n  /** The background color to fill if not transparent */\n  get color() {\n    return this._backgroundColor;\n  }\n  set color(value) {\n    const incoming = Color.shared.setValue(value);\n    if (incoming.alpha < 1 && this._backgroundColor.alpha === 1) {\n      warn(\n        \"Cannot set a transparent background on an opaque canvas. To enable transparency, set backgroundAlpha < 1 when initializing your Application.\"\n      );\n    }\n    this._backgroundColor.setValue(value);\n  }\n  /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n  get alpha() {\n    return this._backgroundColor.alpha;\n  }\n  set alpha(value) {\n    this._backgroundColor.setAlpha(value);\n  }\n  /** The background color as an [R, G, B, A] array. */\n  get colorRgba() {\n    return this._backgroundColor.toArray();\n  }\n  /**\n   * destroys the background system\n   * @internal\n   */\n  destroy() {\n  }\n};\n/** @ignore */\n_BackgroundSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"background\",\n  priority: 0\n};\n/** default options used by the system */\n_BackgroundSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.backgroundAlpha}\n   * @default 1\n   */\n  backgroundAlpha: 1,\n  /**\n   * {@link WebGLOptions.backgroundColor}\n   * @default 0x000000\n   */\n  backgroundColor: 0,\n  /**\n   * {@link WebGLOptions.clearBeforeRender}\n   * @default true\n   */\n  clearBeforeRender: true\n};\nlet BackgroundSystem = _BackgroundSystem;\n\nexport { BackgroundSystem };\n//# sourceMappingURL=BackgroundSystem.mjs.map\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../../filters/FilterEffect.mjs';\nimport { RenderGroup } from '../../../../scene/container/RenderGroup.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst BLEND_MODE_FILTERS = {};\nextensions.handle(ExtensionType.BlendMode, (value) => {\n  if (!value.name) {\n    throw new Error(\"BlendMode extension must have a name property\");\n  }\n  BLEND_MODE_FILTERS[value.name] = value.ref;\n}, (value) => {\n  delete BLEND_MODE_FILTERS[value.name];\n});\nclass BlendModePipe {\n  constructor(renderer) {\n    this._blendModeStack = [];\n    this._isAdvanced = false;\n    this._filterHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._renderer.runners.prerender.add(this);\n  }\n  prerender() {\n    this._activeBlendMode = \"normal\";\n    this._isAdvanced = false;\n  }\n  /**\n   * Push a blend mode onto the internal stack and apply it to the instruction set if needed.\n   * @param renderable - The renderable or {@link RenderGroup} associated with the change.\n   * @param blendMode - The blend mode to activate.\n   * @param instructionSet - The instruction set being built.\n   */\n  pushBlendMode(renderable, blendMode, instructionSet) {\n    this._blendModeStack.push(blendMode);\n    this.setBlendMode(renderable, blendMode, instructionSet);\n  }\n  /**\n   * Pop the last blend mode from the stack and apply the new top-of-stack mode.\n   * @param instructionSet - The instruction set being built.\n   */\n  popBlendMode(instructionSet) {\n    this._blendModeStack.pop();\n    const blendMode = this._blendModeStack[this._activeBlendMode.length - 1] ?? \"normal\";\n    this.setBlendMode(null, blendMode, instructionSet);\n  }\n  /**\n   * Ensure a blend mode switch is added to the instruction set when the mode changes.\n   * If an advanced blend mode is active, subsequent renderables will be collected so they can be\n   * rendered within a single filter pass.\n   * @param renderable - The renderable or {@link RenderGroup} to associate with the change, or null when unwinding.\n   * @param blendMode - The target blend mode.\n   * @param instructionSet - The instruction set being built.\n   */\n  setBlendMode(renderable, blendMode, instructionSet) {\n    const isRenderGroup = renderable instanceof RenderGroup;\n    if (this._activeBlendMode === blendMode) {\n      if (this._isAdvanced && renderable && !isRenderGroup) {\n        this._renderableList?.push(renderable);\n      }\n      return;\n    }\n    if (this._isAdvanced)\n      this._endAdvancedBlendMode(instructionSet);\n    this._activeBlendMode = blendMode;\n    if (!renderable)\n      return;\n    this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n    if (this._isAdvanced)\n      this._beginAdvancedBlendMode(renderable, instructionSet);\n  }\n  _beginAdvancedBlendMode(renderable, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    const blendMode = this._activeBlendMode;\n    if (!BLEND_MODE_FILTERS[blendMode]) {\n      warn(`Unable to assign BlendMode: '${blendMode}'. You may want to include: import 'pixi.js/advanced-blend-modes'`);\n      return;\n    }\n    const filterEffect = this._ensureFilterEffect(blendMode);\n    const isRenderGroup = renderable instanceof RenderGroup;\n    const instruction = {\n      renderPipeId: \"filter\",\n      action: \"pushFilter\",\n      filterEffect,\n      renderables: isRenderGroup ? null : [renderable],\n      container: isRenderGroup ? renderable.root : null,\n      canBundle: false\n    };\n    this._renderableList = instruction.renderables;\n    instructionSet.add(instruction);\n  }\n  _ensureFilterEffect(blendMode) {\n    let filterEffect = this._filterHash[blendMode];\n    if (!filterEffect) {\n      filterEffect = this._filterHash[blendMode] = new FilterEffect();\n      filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode]()];\n    }\n    return filterEffect;\n  }\n  _endAdvancedBlendMode(instructionSet) {\n    this._isAdvanced = false;\n    this._renderableList = null;\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  /**\n   * called when the instruction build process is starting this will reset internally to the default blend mode\n   * @internal\n   */\n  buildStart() {\n    this._isAdvanced = false;\n  }\n  /**\n   * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n   * active, we add the final render instructions added to the instruction set\n   * @param instructionSet - The instruction set we are adding to\n   * @internal\n   */\n  buildEnd(instructionSet) {\n    if (!this._isAdvanced)\n      return;\n    this._endAdvancedBlendMode(instructionSet);\n  }\n  /** @internal */\n  destroy() {\n    this._renderer = null;\n    this._renderableList = null;\n    for (const i in this._filterHash) {\n      this._filterHash[i].destroy();\n    }\n    this._filterHash = null;\n  }\n}\n/** @ignore */\nBlendModePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"blendMode\"\n};\n\nexport { BlendModePipe };\n//# sourceMappingURL=BlendModePipe.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst imageTypes = {\n  png: \"image/png\",\n  jpg: \"image/jpeg\",\n  webp: \"image/webp\"\n};\nconst _ExtractSystem = class _ExtractSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  _normalizeOptions(options, defaults = {}) {\n    if (options instanceof Container || options instanceof Texture) {\n      return {\n        target: options,\n        ...defaults\n      };\n    }\n    return {\n      ...defaults,\n      ...options\n    };\n  }\n  /**\n   * Creates an IImage from a display object or texture.\n   * @param options - Options for creating the image, or the target to extract\n   * @returns Promise that resolves with the generated IImage\n   * @example\n   * ```ts\n   * // Basic usage with a sprite\n   * const sprite = new Sprite(texture);\n   * const image = await renderer.extract.image(sprite);\n   * document.body.appendChild(image);\n   *\n   * // Advanced usage with options\n   * const image = await renderer.extract.image({\n   *     target: container,\n   *     format: 'webp',\n   *     quality: 0.8,\n   *     frame: new Rectangle(0, 0, 100, 100),\n   *     resolution: 2,\n   *     clearColor: '#ff0000',\n   *     antialias: true\n   * });\n   *\n   * // Extract directly from a texture\n   * const texture = Texture.from('myTexture.png');\n   * const image = await renderer.extract.image(texture);\n   * ```\n   * @see {@link ExtractImageOptions} For detailed options\n   * @see {@link ExtractSystem.base64} For base64 string output\n   * @see {@link ExtractSystem.canvas} For canvas output\n   * @see {@link ImageLike} For the image interface\n   * @category rendering\n   */\n  async image(options) {\n    const image = DOMAdapter.get().createImage();\n    image.src = await this.base64(options);\n    return image;\n  }\n  /**\n   * Converts the target into a base64 encoded string.\n   *\n   * This method works by first creating\n   * a canvas using `Extract.canvas` and then converting it to a base64 string.\n   * @param options - The options for creating the base64 string, or the target to extract\n   * @returns Promise that resolves with the base64 encoded string\n   * @example\n   * ```ts\n   * // Basic usage with a sprite\n   * const sprite = new Sprite(texture);\n   * const base64 = await renderer.extract.base64(sprite);\n   * console.log(base64); // data:image/png;base64,...\n   *\n   * // Advanced usage with options\n   * const base64 = await renderer.extract.base64({\n   *     target: container,\n   *     format: 'webp',\n   *     quality: 0.8,\n   *     frame: new Rectangle(0, 0, 100, 100),\n   *     resolution: 2\n   * });\n   * ```\n   * @throws Will throw an error if the platform doesn't support any of:\n   * - ICanvas.toDataURL\n   * - ICanvas.toBlob\n   * - ICanvas.convertToBlob\n   * @see {@link ExtractImageOptions} For detailed options\n   * @see {@link ExtractSystem.canvas} For canvas output\n   * @see {@link ExtractSystem.image} For HTMLImage output\n   * @category rendering\n   */\n  async base64(options) {\n    options = this._normalizeOptions(\n      options,\n      _ExtractSystem.defaultImageOptions\n    );\n    const { format, quality } = options;\n    const canvas = this.canvas(options);\n    if (canvas.toBlob !== void 0) {\n      return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            reject(new Error(\"ICanvas.toBlob failed!\"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }, imageTypes[format], quality);\n      });\n    }\n    if (canvas.toDataURL !== void 0) {\n      return canvas.toDataURL(imageTypes[format], quality);\n    }\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error(\"Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented\");\n  }\n  /**\n   * Creates a Canvas element, renders the target to it and returns it.\n   * This method is useful for creating static images or when you need direct canvas access.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns A Canvas element with the texture rendered on\n   * @example\n   * ```ts\n   * // Basic canvas extraction from a sprite\n   * const sprite = new Sprite(texture);\n   * const canvas = renderer.extract.canvas(sprite);\n   * document.body.appendChild(canvas);\n   *\n   * // Extract with custom region\n   * const canvas = renderer.extract.canvas({\n   *     target: container,\n   *     frame: new Rectangle(0, 0, 100, 100)\n   * });\n   *\n   * // Extract with high resolution\n   * const canvas = renderer.extract.canvas({\n   *     target: sprite,\n   *     resolution: 2,\n   *     clearColor: '#ff0000'\n   * });\n   *\n   * // Extract directly from a texture\n   * const texture = Texture.from('myTexture.png');\n   * const canvas = renderer.extract.canvas(texture);\n   *\n   * // Extract with anti-aliasing\n   * const canvas = renderer.extract.canvas({\n   *     target: graphics,\n   *     antialias: true\n   * });\n   * ```\n   * @see {@link ExtractOptions} For detailed options\n   * @see {@link ExtractSystem.image} For HTMLImage output\n   * @see {@link ExtractSystem.pixels} For raw pixel data\n   * @category rendering\n   */\n  canvas(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    if (target instanceof Texture) {\n      return renderer.texture.generateCanvas(target);\n    }\n    const texture = renderer.textureGenerator.generateTexture(options);\n    const canvas = renderer.texture.generateCanvas(texture);\n    texture.destroy(true);\n    return canvas;\n  }\n  /**\n   * Returns a one-dimensional array containing the pixel data of the entire texture in RGBA order,\n   * with integer values between 0 and 255 (inclusive).\n   * > [!NOE] The returned array is a flat Uint8Array where every 4 values represent RGBA\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns One-dimensional Uint8Array containing the pixel data in RGBA format\n   * @example\n   * ```ts\n   * // Basic pixel extraction\n   * const sprite = new Sprite(texture);\n   * const pixels = renderer.extract.pixels(sprite);\n   * console.log(pixels[0], pixels[1], pixels[2], pixels[3]); // R,G,B,A values\n   *\n   * // Extract with custom region\n   * const pixels = renderer.extract.pixels({\n   *     target: sprite,\n   *     frame: new Rectangle(0, 0, 100, 100)\n   * });\n   *\n   * // Extract with high resolution\n   * const pixels = renderer.extract.pixels({\n   *     target: sprite,\n   *     resolution: 2\n   * });\n   * ```\n   * @see {@link ExtractOptions} For detailed options\n   * @see {@link ExtractSystem.canvas} For canvas output\n   * @see {@link ExtractSystem.image} For image output\n   * @category rendering\n   */\n  pixels(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    const texture = target instanceof Texture ? target : renderer.textureGenerator.generateTexture(options);\n    const pixelInfo = renderer.texture.getPixels(texture);\n    if (target instanceof Container) {\n      texture.destroy(true);\n    }\n    return pixelInfo;\n  }\n  /**\n   * Creates a texture from a display object or existing texture.\n   *\n   * This is useful for creating\n   * reusable textures from rendered content or making copies of existing textures.\n   * > [!NOTE] The returned texture should be destroyed when no longer needed\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns A new texture containing the extracted content\n   * @example\n   * ```ts\n   * // Basic texture extraction from a sprite\n   * const sprite = new Sprite(texture);\n   * const extractedTexture = renderer.extract.texture(sprite);\n   *\n   * // Extract with custom region\n   * const regionTexture = renderer.extract.texture({\n   *     target: container,\n   *     frame: new Rectangle(0, 0, 100, 100)\n   * });\n   *\n   * // Extract with high resolution\n   * const hiResTexture = renderer.extract.texture({\n   *     target: sprite,\n   *     resolution: 2,\n   *     clearColor: '#ff0000'\n   * });\n   *\n   * // Create a new sprite from extracted texture\n   * const newSprite = new Sprite(\n   *     renderer.extract.texture({\n   *         target: graphics,\n   *         antialias: true\n   *     })\n   * );\n   *\n   * // Clean up when done\n   * extractedTexture.destroy(true);\n   * ```\n   * @see {@link ExtractOptions} For detailed options\n   * @see {@link Texture} For texture management\n   * @see {@link GenerateTextureSystem} For texture generation\n   * @category rendering\n   */\n  texture(options) {\n    options = this._normalizeOptions(options);\n    if (options.target instanceof Texture)\n      return options.target;\n    return this._renderer.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Extracts and downloads content from the renderer as an image file.\n   * This is a convenient way to save screenshots or export rendered content.\n   * > [!NOTE] The download will use PNG format regardless of the filename extension\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   * @example\n   * ```ts\n   * // Basic download with default filename\n   * const sprite = new Sprite(texture);\n   * renderer.extract.download(sprite); // Downloads as 'image.png'\n   *\n   * // Download with custom filename\n   * renderer.extract.download({\n   *     target: sprite,\n   *     filename: 'screenshot.png'\n   * });\n   *\n   * // Download with custom region\n   * renderer.extract.download({\n   *     target: container,\n   *     filename: 'region.png',\n   *     frame: new Rectangle(0, 0, 100, 100)\n   * });\n   *\n   * // Download with high resolution and background\n   * renderer.extract.download({\n   *     target: stage,\n   *     filename: 'hd-screenshot.png',\n   *     resolution: 2,\n   *     clearColor: '#ff0000'\n   * });\n   *\n   * // Download with anti-aliasing\n   * renderer.extract.download({\n   *     target: graphics,\n   *     filename: 'smooth.png',\n   *     antialias: true\n   * });\n   * ```\n   * @see {@link ExtractDownloadOptions} For detailed options\n   * @see {@link ExtractSystem.image} For creating images without download\n   * @see {@link ExtractSystem.canvas} For canvas output\n   * @category rendering\n   */\n  download(options) {\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const link = document.createElement(\"a\");\n    link.download = options.filename ?? \"image.png\";\n    link.href = canvas.toDataURL(\"image/png\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  /**\n   * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n   * The image will be displayed in the browser's console using CSS background images.\n   * @param options - The options for logging the image, or the target to log\n   * @param options.width - The width of the logged image preview in the console (in pixels)\n   * @example\n   * ```ts\n   * // Basic usage\n   * const sprite = new Sprite(texture);\n   * renderer.extract.log(sprite);\n   * ```\n   * @see {@link ExtractSystem.canvas} For getting raw canvas output\n   * @see {@link ExtractSystem.pixels} For raw pixel data\n   * @category rendering\n   * @advanced\n   */\n  log(options) {\n    const width = options.width ?? 200;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const base64 = canvas.toDataURL();\n    console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n    const style = [\n      \"font-size: 1px;\",\n      `padding: ${width}px ${300}px;`,\n      `background: url(${base64}) no-repeat;`,\n      \"background-size: contain;\"\n    ].join(\" \");\n    console.log(\"%c \", style);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_ExtractSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"extract\"\n};\n/**\n * Default options for image extraction.\n * @example\n * ```ts\n * // Customize default options\n * ExtractSystem.defaultImageOptions.format = 'webp';\n * ExtractSystem.defaultImageOptions.quality = 0.8;\n *\n * // Use defaults\n * const image = await renderer.extract.image(sprite);\n * ```\n */\n_ExtractSystem.defaultImageOptions = {\n  format: \"png\",\n  quality: 1\n};\nlet ExtractSystem = _ExtractSystem;\n\nexport { ExtractSystem };\n//# sourceMappingURL=ExtractSystem.mjs.map\n","import { TextureSource } from './sources/TextureSource.mjs';\nimport { Texture } from './Texture.mjs';\n\n\"use strict\";\nclass RenderTexture extends Texture {\n  static create(options) {\n    return new RenderTexture({\n      source: new TextureSource(options)\n    });\n  }\n  /**\n   * Resizes the render texture.\n   * @param width - The new width of the render texture.\n   * @param height - The new height of the render texture.\n   * @param resolution - The new resolution of the render texture.\n   * @returns This texture.\n   */\n  resize(width, height, resolution) {\n    this.source.resize(width, height, resolution);\n    return this;\n  }\n}\n\nexport { RenderTexture };\n//# sourceMappingURL=RenderTexture.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { RenderTexture } from '../texture/RenderTexture.mjs';\n\n\"use strict\";\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor = [0, 0, 0, 0];\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * Creates a texture from a display object that can be used for creating sprites and other textures.\n   * This is particularly useful for optimizing performance when a complex container needs to be reused.\n   * @param options - Generate texture options or a container to convert to texture\n   * @returns A new RenderTexture containing the rendered display object\n   * @example\n   * ```ts\n   * // Basic usage with a container\n   * const container = new Container();\n   * container.addChild(\n   *     new Graphics()\n   *         .circle(0, 0, 50)\n   *         .fill('red')\n   * );\n   *\n   * const texture = renderer.textureGenerator.generateTexture(container);\n   *\n   * // Advanced usage with options\n   * const texture = renderer.textureGenerator.generateTexture({\n   *     target: container,\n   *     frame: new Rectangle(0, 0, 100, 100), // Specific region\n   *     resolution: 2,                        // High DPI\n   *     clearColor: '#ff0000',               // Red background\n   *     antialias: true                      // Smooth edges\n   * });\n   *\n   * // Create a sprite from the generated texture\n   * const sprite = new Sprite(texture);\n   *\n   * // Clean up when done\n   * texture.destroy(true);\n   * ```\n   * @see {@link GenerateTextureOptions} For detailed texture generation options\n   * @see {@link RenderTexture} For the type of texture created\n   * @category rendering\n   */\n  generateTexture(options) {\n    if (options instanceof Container) {\n      options = {\n        target: options,\n        frame: void 0,\n        textureSourceOptions: {},\n        resolution: void 0\n      };\n    }\n    const resolution = options.resolution || this._renderer.resolution;\n    const antialias = options.antialias || this._renderer.view.antialias;\n    const container = options.target;\n    let clearColor = options.clearColor;\n    if (clearColor) {\n      const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n      clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n    } else {\n      clearColor = noColor;\n    }\n    const region = options.frame?.copyTo(tempRect) || getLocalBounds(container, tempBounds).rectangle;\n    region.width = Math.max(region.width, 1 / resolution) | 0;\n    region.height = Math.max(region.height, 1 / resolution) | 0;\n    const target = RenderTexture.create({\n      ...options.textureSourceOptions,\n      width: region.width,\n      height: region.height,\n      resolution,\n      antialias\n    });\n    const transform = Matrix.shared.translate(-region.x, -region.y);\n    this._renderer.render({\n      container,\n      transform,\n      target,\n      clearColor\n    });\n    target.source.updateMipmaps();\n    return target;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGenerateTextureSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGenerator\"\n};\n\nexport { GenerateTextureSystem };\n//# sourceMappingURL=GenerateTextureSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../../maths/point/Point.mjs';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from '../shader/UniformGroup.mjs';\n\n\"use strict\";\nclass GlobalUniformSystem {\n  constructor(renderer) {\n    this._stackIndex = 0;\n    this._globalUniformDataStack = [];\n    this._uniformsPool = [];\n    this._activeUniforms = [];\n    this._bindGroupPool = [];\n    this._activeBindGroups = [];\n    this._renderer = renderer;\n  }\n  reset() {\n    this._stackIndex = 0;\n    for (let i = 0; i < this._activeUniforms.length; i++) {\n      this._uniformsPool.push(this._activeUniforms[i]);\n    }\n    for (let i = 0; i < this._activeBindGroups.length; i++) {\n      this._bindGroupPool.push(this._activeBindGroups[i]);\n    }\n    this._activeUniforms.length = 0;\n    this._activeBindGroups.length = 0;\n  }\n  start(options) {\n    this.reset();\n    this.push(options);\n  }\n  bind({\n    size,\n    projectionMatrix,\n    worldTransformMatrix,\n    worldColor,\n    offset\n  }) {\n    const renderTarget = this._renderer.renderTarget.renderTarget;\n    const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n      projectionData: renderTarget,\n      worldTransformMatrix: new Matrix(),\n      worldColor: 4294967295,\n      offset: new Point()\n    };\n    const globalUniformData = {\n      projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n      resolution: size || renderTarget.size,\n      worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n      worldColor: worldColor || currentGlobalUniformData.worldColor,\n      offset: offset || currentGlobalUniformData.offset,\n      bindGroup: null\n    };\n    const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n    this._activeUniforms.push(uniformGroup);\n    const uniforms = uniformGroup.uniforms;\n    uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n    uniforms.uResolution = globalUniformData.resolution;\n    uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n    uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n    uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n    color32BitToUniform(\n      globalUniformData.worldColor,\n      uniforms.uWorldColorAlpha,\n      0\n    );\n    uniformGroup.update();\n    let bindGroup;\n    if (this._renderer.renderPipes.uniformBatch) {\n      bindGroup = this._renderer.renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n    } else {\n      bindGroup = this._bindGroupPool.pop() || new BindGroup();\n      this._activeBindGroups.push(bindGroup);\n      bindGroup.setResource(uniformGroup, 0);\n    }\n    globalUniformData.bindGroup = bindGroup;\n    this._currentGlobalUniformData = globalUniformData;\n  }\n  push(options) {\n    this.bind(options);\n    this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n  }\n  pop() {\n    this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n    if (this._renderer.type === RendererType.WEBGL) {\n      this._currentGlobalUniformData.bindGroup.resources[0].update();\n    }\n  }\n  get bindGroup() {\n    return this._currentGlobalUniformData.bindGroup;\n  }\n  get globalUniformData() {\n    return this._currentGlobalUniformData;\n  }\n  get uniformGroup() {\n    return this._currentGlobalUniformData.bindGroup.resources[0];\n  }\n  _createUniforms() {\n    const globalUniforms = new UniformGroup({\n      uProjectionMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uWorldTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n      uWorldColorAlpha: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    }, {\n      isStatic: true\n    });\n    return globalUniforms;\n  }\n  destroy() {\n    this._renderer = null;\n    this._globalUniformDataStack.length = 0;\n    this._uniformsPool.length = 0;\n    this._activeUniforms.length = 0;\n    this._bindGroupPool.length = 0;\n    this._activeBindGroups.length = 0;\n    this._currentGlobalUniformData = null;\n  }\n}\n/** @ignore */\nGlobalUniformSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"globalUniforms\"\n};\n\nexport { GlobalUniformSystem };\n//# sourceMappingURL=GlobalUniformSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Ticker } from '../../../ticker/Ticker.mjs';\n\n\"use strict\";\nlet uid = 1;\nclass SchedulerSystem {\n  constructor() {\n    this._tasks = [];\n    /** a small off set to apply to the repeat schedules. This is just to make sure they run at slightly different times */\n    this._offset = 0;\n  }\n  /** Initializes the scheduler system and starts the ticker. */\n  init() {\n    Ticker.system.add(this._update, this);\n  }\n  /**\n   * Schedules a repeating task.\n   * @param func - The function to execute.\n   * @param duration - The interval duration in milliseconds.\n   * @param useOffset - this will spread out tasks so that they do not all run at the same time\n   * @returns The unique identifier for the scheduled task.\n   */\n  repeat(func, duration, useOffset = true) {\n    const id = uid++;\n    let offset = 0;\n    if (useOffset) {\n      this._offset += 1e3;\n      offset = this._offset;\n    }\n    this._tasks.push({\n      func,\n      duration,\n      start: performance.now(),\n      offset,\n      last: performance.now(),\n      repeat: true,\n      id\n    });\n    return id;\n  }\n  /**\n   * Cancels a scheduled task.\n   * @param id - The unique identifier of the task to cancel.\n   */\n  cancel(id) {\n    for (let i = 0; i < this._tasks.length; i++) {\n      if (this._tasks[i].id === id) {\n        this._tasks.splice(i, 1);\n        return;\n      }\n    }\n  }\n  /**\n   * Updates and executes the scheduled tasks.\n   * @private\n   */\n  _update() {\n    const now = performance.now();\n    for (let i = 0; i < this._tasks.length; i++) {\n      const task = this._tasks[i];\n      if (now - task.offset - task.last >= task.duration) {\n        const elapsed = now - task.start;\n        task.func(elapsed);\n        task.last = now;\n      }\n    }\n  }\n  /**\n   * Destroys the scheduler system and removes all tasks.\n   * @internal\n   */\n  destroy() {\n    Ticker.system.remove(this._update, this);\n    this._tasks.length = 0;\n  }\n}\n/** @ignore */\nSchedulerSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"scheduler\",\n  priority: 0\n};\n\nexport { SchedulerSystem };\n//# sourceMappingURL=SchedulerSystem.mjs.map\n","import { DOMAdapter } from '../environment/adapter.mjs';\nimport { VERSION } from './const.mjs';\n\n\"use strict\";\nlet saidHello = false;\nfunction sayHello(type) {\n  if (saidHello) {\n    return;\n  }\n  if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf(\"chrome\") > -1) {\n    const args = [\n      `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\n\n`,\n      \"background: #E72264; padding:5px 0;\",\n      \"background: #6CA2EA; padding:5px 0;\",\n      \"background: #B5D33D; padding:5px 0;\",\n      \"background: #FED23F; padding:5px 0;\",\n      \"color: #FFFFFF; background: #E72264; padding:5px 0;\",\n      \"color: #E72264; background: #FFFFFF; padding:5px 0;\"\n    ];\n    globalThis.console.log(...args);\n  } else if (globalThis.console) {\n    globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n  }\n  saidHello = true;\n}\n\nexport { sayHello };\n//# sourceMappingURL=sayHello.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { sayHello } from '../../../../utils/sayHello.mjs';\nimport { RendererType } from '../../types.mjs';\n\n\"use strict\";\nclass HelloSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * It all starts here! This initiates every system, passing in the options for any system by name.\n   * @param options - the config for the renderer and all its systems\n   */\n  init(options) {\n    if (options.hello) {\n      let name = this._renderer.name;\n      if (this._renderer.type === RendererType.WEBGL) {\n        name += ` ${this._renderer.context.webGLVersion}`;\n      }\n      sayHello(name);\n    }\n  }\n}\n/** @ignore */\nHelloSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"hello\",\n  priority: -2\n};\n/** The default options for the system. */\nHelloSystem.defaultOptions = {\n  /** {@link WebGLOptions.hello} */\n  hello: false\n};\n\nexport { HelloSystem };\n//# sourceMappingURL=HelloSystem.mjs.map\n","\"use strict\";\nfunction cleanHash(hash) {\n  let clean = false;\n  for (const i in hash) {\n    if (hash[i] == void 0) {\n      clean = true;\n      break;\n    }\n  }\n  if (!clean)\n    return hash;\n  const cleanHash2 = /* @__PURE__ */ Object.create(null);\n  for (const i in hash) {\n    const value = hash[i];\n    if (value) {\n      cleanHash2[i] = value;\n    }\n  }\n  return cleanHash2;\n}\nfunction cleanArray(arr) {\n  let offset = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == void 0) {\n      offset++;\n    } else {\n      arr[i - offset] = arr[i];\n    }\n  }\n  arr.length -= offset;\n  return arr;\n}\n\nexport { cleanArray, cleanHash };\n//# sourceMappingURL=clean.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { cleanHash, cleanArray } from '../../../../utils/data/clean.mjs';\n\n\"use strict\";\nlet renderableGCTick = 0;\nconst _RenderableGCSystem = class _RenderableGCSystem {\n  /**\n   * Creates a new RenderableGCSystem instance.\n   * @param renderer - The renderer this garbage collection system works for\n   */\n  constructor(renderer) {\n    /** Array of renderables being tracked for garbage collection */\n    this._managedRenderables = [];\n    /** Array of hash objects being tracked for cleanup */\n    this._managedHashes = [];\n    /** Array of arrays being tracked for cleanup */\n    this._managedArrays = [];\n    this._renderer = renderer;\n  }\n  /**\n   * Initializes the garbage collection system with the provided options.\n   * @param options - Configuration options for the renderer\n   */\n  init(options) {\n    options = { ..._RenderableGCSystem.defaultOptions, ...options };\n    this.maxUnusedTime = options.renderableGCMaxUnusedTime;\n    this._frequency = options.renderableGCFrequency;\n    this.enabled = options.renderableGCActive;\n  }\n  /**\n   * Gets whether the garbage collection system is currently enabled.\n   * @returns True if GC is enabled, false otherwise\n   */\n  get enabled() {\n    return !!this._handler;\n  }\n  /**\n   * Enables or disables the garbage collection system.\n   * When enabled, schedules periodic cleanup of resources.\n   * When disabled, cancels all scheduled cleanups.\n   */\n  set enabled(value) {\n    if (this.enabled === value)\n      return;\n    if (value) {\n      this._handler = this._renderer.scheduler.repeat(\n        () => this.run(),\n        this._frequency,\n        false\n      );\n      this._hashHandler = this._renderer.scheduler.repeat(\n        () => {\n          for (const hash of this._managedHashes) {\n            hash.context[hash.hash] = cleanHash(hash.context[hash.hash]);\n          }\n        },\n        this._frequency\n      );\n      this._arrayHandler = this._renderer.scheduler.repeat(\n        () => {\n          for (const array of this._managedArrays) {\n            cleanArray(array.context[array.hash]);\n          }\n        },\n        this._frequency\n      );\n    } else {\n      this._renderer.scheduler.cancel(this._handler);\n      this._renderer.scheduler.cancel(this._hashHandler);\n      this._renderer.scheduler.cancel(this._arrayHandler);\n    }\n  }\n  /**\n   * Adds a hash table to be managed by the garbage collector.\n   * @param context - The object containing the hash table\n   * @param hash - The property name of the hash table\n   */\n  addManagedHash(context, hash) {\n    this._managedHashes.push({ context, hash });\n  }\n  /**\n   * Adds an array to be managed by the garbage collector.\n   * @param context - The object containing the array\n   * @param hash - The property name of the array\n   */\n  addManagedArray(context, hash) {\n    this._managedArrays.push({ context, hash });\n  }\n  /**\n   * Updates the GC timestamp and tracking before rendering.\n   * @param options - The render options\n   * @param options.container - The container to render\n   */\n  prerender({\n    container\n  }) {\n    this._now = performance.now();\n    container.renderGroup.gcTick = renderableGCTick++;\n    this._updateInstructionGCTick(container.renderGroup, container.renderGroup.gcTick);\n  }\n  /**\n   * Starts tracking a renderable for garbage collection.\n   * @param renderable - The renderable to track\n   */\n  addRenderable(renderable) {\n    if (!this.enabled)\n      return;\n    if (renderable._lastUsed === -1) {\n      this._managedRenderables.push(renderable);\n      renderable.once(\"destroyed\", this._removeRenderable, this);\n    }\n    renderable._lastUsed = this._now;\n  }\n  /**\n   * Performs garbage collection by cleaning up unused renderables.\n   * Removes renderables that haven't been used for longer than maxUnusedTime.\n   */\n  run() {\n    const now = this._now;\n    const managedRenderables = this._managedRenderables;\n    const renderPipes = this._renderer.renderPipes;\n    let offset = 0;\n    for (let i = 0; i < managedRenderables.length; i++) {\n      const renderable = managedRenderables[i];\n      if (renderable === null) {\n        offset++;\n        continue;\n      }\n      const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n      const currentTick = renderGroup?.instructionSet?.gcTick ?? -1;\n      if ((renderGroup?.gcTick ?? 0) === currentTick) {\n        renderable._lastUsed = now;\n      }\n      if (now - renderable._lastUsed > this.maxUnusedTime) {\n        if (!renderable.destroyed) {\n          const rp = renderPipes;\n          if (renderGroup)\n            renderGroup.structureDidChange = true;\n          rp[renderable.renderPipeId].destroyRenderable(renderable);\n        }\n        renderable._lastUsed = -1;\n        offset++;\n        renderable.off(\"destroyed\", this._removeRenderable, this);\n      } else {\n        managedRenderables[i - offset] = renderable;\n      }\n    }\n    managedRenderables.length -= offset;\n  }\n  /** Cleans up the garbage collection system. Disables GC and removes all tracked resources. */\n  destroy() {\n    this.enabled = false;\n    this._renderer = null;\n    this._managedRenderables.length = 0;\n    this._managedHashes.length = 0;\n    this._managedArrays.length = 0;\n  }\n  /**\n   * Removes a renderable from being tracked when it's destroyed.\n   * @param renderable - The renderable to stop tracking\n   */\n  _removeRenderable(renderable) {\n    const index = this._managedRenderables.indexOf(renderable);\n    if (index >= 0) {\n      renderable.off(\"destroyed\", this._removeRenderable, this);\n      this._managedRenderables[index] = null;\n    }\n  }\n  /**\n   * Updates the GC tick counter for a render group and its children.\n   * @param renderGroup - The render group to update\n   * @param gcTick - The new tick value\n   */\n  _updateInstructionGCTick(renderGroup, gcTick) {\n    renderGroup.instructionSet.gcTick = gcTick;\n    for (const child of renderGroup.renderGroupChildren) {\n      this._updateInstructionGCTick(child, gcTick);\n    }\n  }\n};\n/**\n * Extension metadata for registering this system with the renderer.\n * @ignore\n */\n_RenderableGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"renderableGC\",\n  priority: 0\n};\n/**\n * Default configuration options for the garbage collection system.\n * These can be overridden when initializing the renderer.\n */\n_RenderableGCSystem.defaultOptions = {\n  /** Enable/disable the garbage collector */\n  renderableGCActive: true,\n  /** Time in ms before an unused resource is collected (default 1 minute) */\n  renderableGCMaxUnusedTime: 6e4,\n  /** How often to run garbage collection in ms (default 30 seconds) */\n  renderableGCFrequency: 3e4\n};\nlet RenderableGCSystem = _RenderableGCSystem;\n\nexport { RenderableGCSystem };\n//# sourceMappingURL=RenderableGCSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _TextureGCSystem = class _TextureGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n  }\n  init(options) {\n    options = { ..._TextureGCSystem.defaultOptions, ...options };\n    this.checkCountMax = options.textureGCCheckCountMax;\n    this.maxIdle = options.textureGCAMaxIdle ?? options.textureGCMaxIdle;\n    this.active = options.textureGCActive;\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  postrender() {\n    if (!this._renderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (!this.active)\n      return;\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  run() {\n    const managedTextures = this._renderer.texture.managedTextures;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n        texture._touched = -1;\n        texture.unload();\n      }\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_TextureGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGC\"\n};\n/** default options for the TextureGCSystem */\n_TextureGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  textureGCActive: true,\n  /**\n   * @deprecated since 8.3.0\n   * @see {@link TextureGCSystemOptions.textureGCMaxIdle}\n   */\n  textureGCAMaxIdle: null,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  textureGCMaxIdle: 60 * 60,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  textureGCCheckCountMax: 600\n};\nlet TextureGCSystem = _TextureGCSystem;\n\nexport { TextureGCSystem };\n//# sourceMappingURL=TextureGCSystem.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { RenderTarget } from '../renderTarget/RenderTarget.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\n\n\"use strict\";\nconst _ViewSystem = class _ViewSystem {\n  /**\n   * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n   * This is only supported for HTMLCanvasElement and will be ignored if the canvas is an OffscreenCanvas.\n   * @type {boolean}\n   */\n  get autoDensity() {\n    return this.texture.source.autoDensity;\n  }\n  set autoDensity(value) {\n    this.texture.source.autoDensity = value;\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(\n      this.texture.source.width,\n      this.texture.source.height,\n      value\n    );\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      deprecation(v8_0_0, \"ViewSystem.view has been renamed to ViewSystem.canvas\");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle(0, 0, options.width, options.height);\n    this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = getCanvasTexture(this.canvas, options);\n    this.renderTarget = new RenderTarget({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or \"false\".\n   * @example\n   * viewSystem.destroy();\n   * viewSystem.destroy(true);\n   * viewSystem.destroy({ removeView: true });\n   */\n  destroy(options = false) {\n    const removeView = typeof options === \"boolean\" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n    this.texture.destroy();\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"view\",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\n\nexport { ViewSystem };\n//# sourceMappingURL=ViewSystem.mjs.map\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe.mjs';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe.mjs';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem.mjs';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe.mjs';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks.mjs';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe.mjs';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe.mjs';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe.mjs';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe.mjs';\nimport { BackgroundSystem } from '../background/BackgroundSystem.mjs';\nimport { BlendModePipe } from '../blendModes/BlendModePipe.mjs';\nimport { ExtractSystem } from '../extract/ExtractSystem.mjs';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem.mjs';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem.mjs';\nimport { SchedulerSystem } from '../SchedulerSystem.mjs';\nimport { HelloSystem } from '../startup/HelloSystem.mjs';\nimport { RenderableGCSystem } from '../texture/RenderableGCSystem.mjs';\nimport { TextureGCSystem } from '../texture/TextureGCSystem.mjs';\nimport { ViewSystem } from '../view/ViewSystem.mjs';\n\n\"use strict\";\nconst SharedSystems = [\n  BackgroundSystem,\n  GlobalUniformSystem,\n  HelloSystem,\n  ViewSystem,\n  RenderGroupSystem,\n  TextureGCSystem,\n  GenerateTextureSystem,\n  ExtractSystem,\n  RendererInitHook,\n  RenderableGCSystem,\n  SchedulerSystem\n];\nconst SharedRenderPipes = [\n  BlendModePipe,\n  BatcherPipe,\n  SpritePipe,\n  RenderGroupPipe,\n  AlphaMaskPipe,\n  StencilMaskPipe,\n  ColorMaskPipe,\n  CustomRenderPipe\n];\n\nexport { SharedRenderPipes, SharedSystems };\n//# sourceMappingURL=SharedSystems.mjs.map\n","\"use strict\";\nconst localUniformBit = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace(\"group(1)\", \"group(2)\")\n  }\n};\nconst localUniformBitGl = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  }\n};\n\nexport { localUniformBit, localUniformBitGl, localUniformBitGroup2 };\n//# sourceMappingURL=localUniformBit.mjs.map\n","import { uid } from '../../../../utils/data/uid.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst _RenderTarget = class _RenderTarget {\n  /**\n   * @param [descriptor] - Options for creating a render target.\n   */\n  constructor(descriptor = {}) {\n    /** unique id for this render target */\n    this.uid = uid(\"renderTarget\");\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    this.colorTextures = [];\n    this.dirtyId = 0;\n    this.isRoot = false;\n    this._size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    this._managedColorTextures = false;\n    descriptor = { ..._RenderTarget.defaultOptions, ...descriptor };\n    this.stencil = descriptor.stencil;\n    this.depth = descriptor.depth;\n    this.isRoot = descriptor.isRoot;\n    if (typeof descriptor.colorTextures === \"number\") {\n      this._managedColorTextures = true;\n      for (let i = 0; i < descriptor.colorTextures; i++) {\n        this.colorTextures.push(\n          new TextureSource({\n            width: descriptor.width,\n            height: descriptor.height,\n            resolution: descriptor.resolution,\n            antialias: descriptor.antialias\n          })\n        );\n      }\n    } else {\n      this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n      const colorSource = this.colorTexture.source;\n      this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n    }\n    this.colorTexture.source.on(\"resize\", this.onSourceResize, this);\n    if (descriptor.depthStencilTexture || this.stencil) {\n      if (descriptor.depthStencilTexture instanceof Texture || descriptor.depthStencilTexture instanceof TextureSource) {\n        this.depthStencilTexture = descriptor.depthStencilTexture.source;\n      } else {\n        this.ensureDepthStencilTexture();\n      }\n    }\n  }\n  get size() {\n    const _size = this._size;\n    _size[0] = this.pixelWidth;\n    _size[1] = this.pixelHeight;\n    return _size;\n  }\n  get width() {\n    return this.colorTexture.source.width;\n  }\n  get height() {\n    return this.colorTexture.source.height;\n  }\n  get pixelWidth() {\n    return this.colorTexture.source.pixelWidth;\n  }\n  get pixelHeight() {\n    return this.colorTexture.source.pixelHeight;\n  }\n  get resolution() {\n    return this.colorTexture.source._resolution;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  onSourceResize(source) {\n    this.resize(source.width, source.height, source._resolution, true);\n  }\n  /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   */\n  ensureDepthStencilTexture() {\n    if (!this.depthStencilTexture) {\n      this.depthStencilTexture = new TextureSource({\n        width: this.width,\n        height: this.height,\n        resolution: this.resolution,\n        format: \"depth24plus-stencil8\",\n        autoGenerateMipmaps: false,\n        antialias: false,\n        mipLevelCount: 1\n        // sampleCount: handled by the render target system..\n      });\n    }\n  }\n  resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n    this.dirtyId++;\n    this.colorTextures.forEach((colorTexture, i) => {\n      if (skipColorTexture && i === 0)\n        return;\n      colorTexture.source.resize(width, height, resolution);\n    });\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n  }\n  destroy() {\n    this.colorTexture.source.off(\"resize\", this.onSourceResize, this);\n    if (this._managedColorTextures) {\n      this.colorTextures.forEach((texture) => {\n        texture.destroy();\n      });\n    }\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.destroy();\n      delete this.depthStencilTexture;\n    }\n  }\n};\n/** The default options for a render target */\n_RenderTarget.defaultOptions = {\n  /** the width of the RenderTarget */\n  width: 0,\n  /** the height of the RenderTarget */\n  height: 0,\n  /** the resolution of the RenderTarget */\n  resolution: 1,\n  /** an array of textures, or a number indicating how many color textures there should be */\n  colorTextures: 1,\n  /** should this render target have a stencil buffer? */\n  stencil: false,\n  /** should this render target have a depth buffer? */\n  depth: false,\n  /** should this render target be antialiased? */\n  antialias: false,\n  // save on perf by default!\n  /** is this a root element, true if this is gl context owners render target */\n  isRoot: false\n};\nlet RenderTarget = _RenderTarget;\n\nexport { RenderTarget };\n//# sourceMappingURL=RenderTarget.mjs.map\n","\"use strict\";\nconst uniformParsers = [\n  // uploading pixi matrix object to mat3\n  {\n    type: \"mat3x3<f32>\",\n    test: (data) => {\n      const value = data.value;\n      return value.a !== void 0;\n    },\n    ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n    uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n  },\n  // uploading a pixi rectangle as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.width !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n  },\n  // uploading a pixi point as a vec2\n  {\n    type: \"vec2<f32>\",\n    test: (data) => data.type === \"vec2<f32>\" && data.size === 1 && data.value.x !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n  },\n  // uploading a pixi color as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n  },\n  // uploading a pixi color as a vec3\n  {\n    type: \"vec3<f32>\",\n    test: (data) => data.type === \"vec3<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n  }\n];\n\nexport { uniformParsers };\n//# sourceMappingURL=uniformParsers.mjs.map\n","import { warn } from '../../../../../utils/logging/warn.mjs';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction ensureAttributes(geometry, extractedData) {\n  for (const i in geometry.attributes) {\n    const attribute = geometry.attributes[i];\n    const attributeData = extractedData[i];\n    if (attributeData) {\n      attribute.format ?? (attribute.format = attributeData.format);\n      attribute.offset ?? (attribute.offset = attributeData.offset);\n      attribute.instance ?? (attribute.instance = attributeData.instance);\n    } else {\n      warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n    }\n  }\n  ensureStartAndStride(geometry);\n}\nfunction ensureStartAndStride(geometry) {\n  const { buffers, attributes } = geometry;\n  const tempStride = {};\n  const tempStart = {};\n  for (const j in buffers) {\n    const buffer = buffers[j];\n    tempStride[buffer.uid] = 0;\n    tempStart[buffer.uid] = 0;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    attribute.stride ?? (attribute.stride = tempStride[attribute.buffer.uid]);\n    attribute.start ?? (attribute.start = tempStart[attribute.buffer.uid]);\n    tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n}\n\nexport { ensureAttributes };\n//# sourceMappingURL=ensureAttributes.mjs.map\n","\"use strict\";\nfunction colorToUniform(rgb, alpha, out, offset) {\n  out[offset++] = (rgb >> 16 & 255) / 255;\n  out[offset++] = (rgb >> 8 & 255) / 255;\n  out[offset++] = (rgb & 255) / 255;\n  out[offset++] = alpha;\n}\nfunction color32BitToUniform(abgr, out, offset) {\n  const alpha = (abgr >> 24 & 255) / 255;\n  out[offset++] = (abgr & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 8 & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 16 & 255) / 255 * alpha;\n  out[offset++] = alpha;\n}\n\nexport { color32BitToUniform, colorToUniform };\n//# sourceMappingURL=colorToUniform.mjs.map\n","\"use strict\";\nconst textureBit = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    )\n  }\n};\nconst textureBitGl = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureMatrix;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n        uniform sampler2D uTexture;\n\n\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            outColor = texture(uTexture, vUV);\n        `\n    )\n  }\n};\n\nexport { textureBit, textureBitGl };\n//# sourceMappingURL=textureBit.mjs.map\n","import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { CLEAR } from '../../gl/const.mjs';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection.mjs';\nimport { SystemRunner } from '../system/SystemRunner.mjs';\nimport { CanvasSource } from '../texture/sources/CanvasSource.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\nimport { isRenderingToScreen } from './isRenderingToScreen.mjs';\nimport { RenderTarget } from './RenderTarget.mjs';\n\n\"use strict\";\nclass RenderTargetSystem {\n  constructor(renderer) {\n    /** This is the root viewport for the render pass*/\n    this.rootViewPort = new Rectangle();\n    /** the current viewport that the gpu is using */\n    this.viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    this.onRenderTargetChange = new SystemRunner(\"onRenderTargetChange\");\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    this.projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    this.defaultClearColor = [0, 0, 0, 0];\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    this._renderSurfaceToRenderTargetHash = /* @__PURE__ */ new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    this._renderTargetStack = [];\n    this._renderer = renderer;\n    renderer.renderableGC.addManagedHash(this, \"_gpuRenderTargetHash\");\n  }\n  /** called when dev wants to finish a render pass */\n  finishRenderPass() {\n    this.adaptor.finishRenderPass(this.renderTarget);\n  }\n  /**\n   * called when the renderer starts to render a scene.\n   * @param options\n   * @param options.target - the render target to render to\n   * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param options.clearColor - the color to clear to\n   * @param options.frame - the frame to render to\n   */\n  renderStart({\n    target,\n    clear,\n    clearColor,\n    frame\n  }) {\n    this._renderTargetStack.length = 0;\n    this.push(\n      target,\n      clear,\n      clearColor,\n      frame\n    );\n    this.rootViewPort.copyFrom(this.viewport);\n    this.rootRenderTarget = this.renderTarget;\n    this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n    this.adaptor.prerender?.(this.rootRenderTarget);\n  }\n  postrender() {\n    this.adaptor.postrender?.(this.rootRenderTarget);\n  }\n  /**\n   * Binding a render surface! This is the main function of the render target system.\n   * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n   * Once bound all draw calls will be rendered to the render surface.\n   *\n   * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n   * @param renderSurface - the render surface to bind\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to render to\n   * @returns the render target that was bound\n   */\n  bind(renderSurface, clear = true, clearColor, frame) {\n    const renderTarget = this.getRenderTarget(renderSurface);\n    const didChange = this.renderTarget !== renderTarget;\n    this.renderTarget = renderTarget;\n    this.renderSurface = renderSurface;\n    const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n    if (renderTarget.pixelWidth !== gpuRenderTarget.width || renderTarget.pixelHeight !== gpuRenderTarget.height) {\n      this.adaptor.resizeGpuRenderTarget(renderTarget);\n      gpuRenderTarget.width = renderTarget.pixelWidth;\n      gpuRenderTarget.height = renderTarget.pixelHeight;\n    }\n    const source = renderTarget.colorTexture;\n    const viewport = this.viewport;\n    const pixelWidth = source.pixelWidth;\n    const pixelHeight = source.pixelHeight;\n    if (!frame && renderSurface instanceof Texture) {\n      frame = renderSurface.frame;\n    }\n    if (frame) {\n      const resolution = source._resolution;\n      viewport.x = frame.x * resolution + 0.5 | 0;\n      viewport.y = frame.y * resolution + 0.5 | 0;\n      viewport.width = frame.width * resolution + 0.5 | 0;\n      viewport.height = frame.height * resolution + 0.5 | 0;\n    } else {\n      viewport.x = 0;\n      viewport.y = 0;\n      viewport.width = pixelWidth;\n      viewport.height = pixelHeight;\n    }\n    calculateProjection(\n      this.projectionMatrix,\n      0,\n      0,\n      viewport.width / source.resolution,\n      viewport.height / source.resolution,\n      !renderTarget.isRoot\n    );\n    this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n    if (didChange) {\n      this.onRenderTargetChange.emit(renderTarget);\n    }\n    return renderTarget;\n  }\n  clear(target, clear = CLEAR.ALL, clearColor) {\n    if (!clear)\n      return;\n    if (target) {\n      target = this.getRenderTarget(target);\n    }\n    this.adaptor.clear(\n      target || this.renderTarget,\n      clear,\n      clearColor,\n      this.viewport\n    );\n  }\n  contextChange() {\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Push a render surface to the renderer. This will bind the render surface to the renderer,\n   * @param renderSurface - the render surface to push\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to use when rendering to the render surface\n   */\n  push(renderSurface, clear = CLEAR.ALL, clearColor, frame) {\n    const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n    this._renderTargetStack.push({\n      renderTarget,\n      frame\n    });\n    return renderTarget;\n  }\n  /** Pops the current render target from the renderer and restores the previous render target. */\n  pop() {\n    this._renderTargetStack.pop();\n    const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n    this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n  }\n  /**\n   * Gets the render target from the provide render surface. Eg if its a texture,\n   * it will return the render target for the texture.\n   * If its a render target, it will return the same render target.\n   * @param renderSurface - the render surface to get the render target for\n   * @returns the render target for the render surface\n   */\n  getRenderTarget(renderSurface) {\n    if (renderSurface.isTexture) {\n      renderSurface = renderSurface.source;\n    }\n    return this._renderSurfaceToRenderTargetHash.get(renderSurface) ?? this._initRenderTarget(renderSurface);\n  }\n  /**\n   * Copies a render surface to another texture.\n   *\n   * NOTE:\n   * for sourceRenderSurfaceTexture, The render target must be something that is written too by the renderer\n   *\n   * The following is not valid:\n   * @example\n   * const canvas = document.createElement('canvas')\n   * canvas.width = 200;\n   * canvas.height = 200;\n   *\n   * const ctx = canvas2.getContext('2d')!\n   * ctx.fillStyle = 'red'\n   * ctx.fillRect(0, 0, 200, 200);\n   *\n   * const texture = RenderTexture.create({\n   *   width: 200,\n   *   height: 200,\n   * })\n   * const renderTarget = renderer.renderTarget.getRenderTarget(canvas2);\n   *\n   * renderer.renderTarget.copyToTexture(renderTarget,texture, {x:0,y:0},{width:200,height:200},{x:0,y:0});\n   *\n   * The best way to copy a canvas is to create a texture from it. Then render with that.\n   *\n   * Parsing in a RenderTarget canvas context (with a 2d context)\n   * @param sourceRenderSurfaceTexture - the render surface to copy from\n   * @param destinationTexture - the texture to copy to\n   * @param originSrc - the origin of the copy\n   * @param originSrc.x - the x origin of the copy\n   * @param originSrc.y - the y origin of the copy\n   * @param size - the size of the copy\n   * @param size.width - the width of the copy\n   * @param size.height - the height of the copy\n   * @param originDest - the destination origin (top left to paste from!)\n   * @param originDest.x - the x origin of the paste\n   * @param originDest.y - the y origin of the paste\n   */\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    if (originSrc.x < 0) {\n      size.width += originSrc.x;\n      originDest.x -= originSrc.x;\n      originSrc.x = 0;\n    }\n    if (originSrc.y < 0) {\n      size.height += originSrc.y;\n      originDest.y -= originSrc.y;\n      originSrc.y = 0;\n    }\n    const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n    size.width = Math.min(size.width, pixelWidth - originSrc.x);\n    size.height = Math.min(size.height, pixelHeight - originSrc.y);\n    return this.adaptor.copyToTexture(\n      sourceRenderSurfaceTexture,\n      destinationTexture,\n      originSrc,\n      size,\n      originDest\n    );\n  }\n  /**\n   * ensures that we have a depth stencil buffer available to render to\n   * This is used by the mask system to make sure we have a stencil buffer.\n   */\n  ensureDepthStencil() {\n    if (!this.renderTarget.stencil) {\n      this.renderTarget.stencil = true;\n      this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n    }\n  }\n  /** nukes the render target system */\n  destroy() {\n    this._renderer = null;\n    this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) => {\n      if (renderTarget !== key) {\n        renderTarget.destroy();\n      }\n    });\n    this._renderSurfaceToRenderTargetHash.clear();\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  _initRenderTarget(renderSurface) {\n    let renderTarget = null;\n    if (CanvasSource.test(renderSurface)) {\n      renderSurface = getCanvasTexture(renderSurface).source;\n    }\n    if (renderSurface instanceof RenderTarget) {\n      renderTarget = renderSurface;\n    } else if (renderSurface instanceof TextureSource) {\n      renderTarget = new RenderTarget({\n        colorTextures: [renderSurface]\n      });\n      if (renderSurface.source instanceof CanvasSource) {\n        renderTarget.isRoot = true;\n      }\n      renderSurface.once(\"destroy\", () => {\n        renderTarget.destroy();\n        this._renderSurfaceToRenderTargetHash.delete(renderSurface);\n        const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n        if (gpuRenderTarget) {\n          this._gpuRenderTargetHash[renderTarget.uid] = null;\n          this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n        }\n      });\n    }\n    this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n    return renderTarget;\n  }\n  getGpuRenderTarget(renderTarget) {\n    return this._gpuRenderTargetHash[renderTarget.uid] || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n  }\n  resetState() {\n    this.renderTarget = null;\n    this.renderSurface = null;\n  }\n}\n\nexport { RenderTargetSystem };\n//# sourceMappingURL=RenderTargetSystem.mjs.map\n","\"use strict\";\nfunction isRenderingToScreen(renderTarget) {\n  const resource = renderTarget.colorTexture.source.resource;\n  return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement && document.body.contains(resource);\n}\n\nexport { isRenderingToScreen };\n//# sourceMappingURL=isRenderingToScreen.mjs.map\n","\"use strict\";\nfunction calculateProjection(pm, x, y, width, height, flipY) {\n  const sign = flipY ? 1 : -1;\n  pm.identity();\n  pm.a = 1 / width * 2;\n  pm.d = sign * (1 / height * 2);\n  pm.tx = -1 - x * pm.a;\n  pm.ty = -sign - y * pm.d;\n  return pm;\n}\n\nexport { calculateProjection };\n//# sourceMappingURL=calculateProjection.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nclass BufferResource extends EventEmitter {\n  /**\n   * Create a new Buffer Resource.\n   * @param options - The options for the buffer resource\n   * @param options.buffer - The underlying buffer that this resource is using\n   * @param options.offset - The offset of the buffer this resource is using.\n   * If not provided, then it will use the offset of the buffer.\n   * @param options.size - The size of the buffer this resource is using.\n   * If not provided, then it will use the size of the buffer.\n   */\n  constructor({ buffer, offset, size }) {\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     */\n    this._resourceType = \"bufferResource\";\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     */\n    this._touched = 0;\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     */\n    this._bufferResource = true;\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    this.buffer = buffer;\n    this.offset = offset | 0;\n    this.size = size;\n    this.buffer.on(\"change\", this.onBufferChange, this);\n  }\n  onBufferChange() {\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n  }\n  /**\n   * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n   * if you want to destroy it as well, or code will explode\n   * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n   */\n  destroy(destroyBuffer = false) {\n    this.destroyed = true;\n    if (destroyBuffer) {\n      this.buffer.destroy();\n    }\n    this.emit(\"change\", this);\n    this.buffer = null;\n  }\n}\n\nexport { BufferResource };\n//# sourceMappingURL=BufferResource.mjs.map\n","import { uniformParsers } from './uniformParsers.mjs';\n\n\"use strict\";\nfunction createUboSyncFunction(uboElements, parserCode, arrayGenerationFunction, singleSettersMap) {\n  const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n  let prev = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    const name = uboElement.data.name;\n    let parsed = false;\n    let offset = 0;\n    for (let j = 0; j < uniformParsers.length; j++) {\n      const uniformParser = uniformParsers[j];\n      if (uniformParser.test(uboElement.data)) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          `name = \"${name}\";`,\n          `offset += ${offset - prev};`,\n          uniformParsers[j][parserCode] || uniformParsers[j].ubo\n        );\n        parsed = true;\n        break;\n      }\n    }\n    if (!parsed) {\n      if (uboElement.data.size > 1) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n      } else {\n        const template = singleSettersMap[uboElement.data.type];\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          /* wgsl */\n          `\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `\n        );\n      }\n    }\n    prev = offset;\n  }\n  const fragmentSrc = funcFragments.join(\"\\n\");\n  return new Function(\n    \"uv\",\n    \"data\",\n    \"dataInt32\",\n    \"offset\",\n    fragmentSrc\n  );\n}\n\nexport { createUboSyncFunction };\n//# sourceMappingURL=createUboSyncFunction.mjs.map\n","import { STENCIL_MODES } from '../../shared/state/const.mjs';\n\n\"use strict\";\nconst GpuStencilModesToPixi = [];\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = void 0;\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n  stencilWriteMask: 0,\n  stencilReadMask: 0\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.INVERSE_MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"not-equal\",\n    passOp: \"keep\"\n  },\n  stencilBack: {\n    compare: \"not-equal\",\n    passOp: \"keep\"\n  }\n};\n\nexport { GpuStencilModesToPixi };\n//# sourceMappingURL=GpuStencilModesToPixi.mjs.map\n"],"names":["canvasCache","Map","getCanvasTexture","canvas","options","has","texture","source","resource","onDestroy","get","delete","once","set","register","UboSystem","constructor","adaptor","this","_syncFunctionHash","Object","create","_adaptor","_systemCheck","Error","ensureUniformGroup","uniformGroup","uniformData","getUniformGroupData","buffer","data","Float32Array","layout","size","usage","UNIFORM","COPY_DST","_signature","_initUniformGroup","uniformGroupSignature","elements","keys","uniformStructures","map","i","createUboElements","syncFunction","_generateUboSync","uboElements","generateUboSync","syncUniformGroup","offset","uniformGroupData","dataInt32","uniforms","updateUniformGroup","isStatic","_dirtyId","synced","update","destroy","loopMatrix","col","row","uboSyncFunctionsSTD40","f32","i32","uboSyncFunctionsWGSL","BatchableSprite","batcherName","topology","attributeSize","indexSize","packAsQuad","roundPixels","_attributeStart","_batcher","_batch","blendMode","renderable","groupBlendMode","color","groupColorAlpha","reset","bounds","CustomRenderPipe","renderer","_renderer","updateRenderable","destroyRenderable","validateRenderable","addRenderable","container","instructionSet","renderPipes","batch","break","add","execute","isRenderable","render","extension","type","WebGLPipes","WebGPUPipes","CanvasPipes","name","executeInstructions","renderGroup","instructions","instructionSize","instruction","renderPipeId","tempMatrix","Matrix","RenderGroupPipe","addRenderGroup","isCachedAsTexture","_addRenderableCacheAsTexture","_addRenderableDirect","_executeCacheAsTexture","_executeDirect","_batchableRenderGroup","return","batchableRenderGroup","root","transform","relativeGroupTransform","_textureBounds","pushBlendMode","addToBatch","popBlendMode","textureNeedsUpdate","worldTransformMatrix","identity","translate","x","y","renderTarget","push","frame","globalUniforms","worldColor","finishRenderPass","pop","updateElement","geometry","buffers","inverseParentTextureTransform","worldColorAlpha","clearList","list","index","j","length","tempContainer","Container","UPDATE_BLEND_COLOR_VISIBLE","updateRenderGroupTransforms","updateChildRenderGroups","worldAlpha","renderGroupParent","worldTransform","appendFrom","multiplyColors","groupColor","groupAlpha","copyFrom","localTransform","localColor","localAlpha","updateRenderGroupTransform","childrenToUpdate","updateTick","renderGroupDepth","Number","childrenAtDepth","child","parentRenderGroup","relativeRenderGroupDepth","updateTransformAndChildren","renderGroupChildren","updateFlags","didChange","updateLocalTransform","parent","_updateFlags","updateColorBlendVisibility","children","structureDidChange","localBlendMode","globalDisplayStatus","localDisplayStatus","RenderGroupSystem","originalLocalTransform","_updateCachedRenderGroups","_updateRenderGroups","start","uniformBatch","renderEnd","closestCacheAsTexture","_parentCacheAsTextureRenderGroup","invalidateMatrices","getLocalBounds","ceil","lastTexture","TexturePool","returnTexture","resolution","textureOptions","view","antialias","scaleMode","getOptimalTexture","width","height","_source","style","TextureStyle","Bounds","runOnRender","childrenRenderablesToUpdate","rebuildRequired","validateRenderables","_buildInstructions","_updateRenderables","upload","didViewUpdate","rendererOrPipes","buildStart","colorMask","sortableChildren","sortChildren","collectRenderablesWithEffects","buildEnd","WebGLSystem","WebGPUSystem","CanvasSystem","SpritePipe","sprite","gpuSprite","_getGpuSprite","_updateBatchableSprite","checkAndUpdateTexture","_texture","batchableSprite","visualBounds","_gpuData","uid","_initGPUSprite","groupTransform","_roundPixels","_BatcherPipe","state","State","for2d","_batchersByInstructionSet","_activeBatches","init","getBatcher","_availableBatchers","batchers","default","DefaultBatcher","maxTextures","limits","maxBatchableTextures","_activeBatch","begin","batchableObject","batches","indexBuffer","setDataWithSize","attributeBuffer","float32View","batcher","dirty","action","shader","BatcherPipe","handleByMap","Batcher","MaskFilter","Filter","rest","textureMatrix","TextureMatrix","filterUniforms","UniformGroup","uFilterMatrix","value","uMaskClamp","uClampFrame","uAlpha","uInverse","inverse","super","gpuProgram","GpuProgram","from","vertex","entryPoint","fragment","glProgram","GlProgram","clipToViewport","resources","uMaskTexture","_textureMatrix","apply","filterManager","input","output","clearMode","calculateSpriteMatrix","prepend","mapCoord","applyFilter","tempBounds","AlphaMaskEffect","FilterEffect","filters","Sprite","Texture","EMPTY","AlphaMaskPipe","_activeMaskStage","mask","maskedContainer","_maskOptions","canBundle","renderMaskToTexture","maskContainer","includeInBuild","collectRenderables","_maskedContainer","renderMask","filterEffect","measurable","getGlobalBounds","colorTextureSource","colorTexture","filterTexture","_resolution","tx","minX","ty","minY","maskData","WEBGL","filter","ColorMaskPipe","_colorStack","_colorStackIndex","_currentColor","_container","colorStack","currentColor","_mask","setMask","StencilMaskPipe","_maskStackHash","_maskHash","WeakMap","_a","effect","setBlendMode","instructionsStart","instructionsLength","renderTargetUid","maskStackIndex","ensureDepthStencil","stencil","setStencilMode","RENDERING_MASK_ADD","INVERSE_MASK_ACTIVE","MASK_ACTIVE","RENDERING_MASK_REMOVE","clear","STENCIL","DISABLED","_BackgroundSystem","clearBeforeRender","_backgroundColor","Color","alpha","defaultOptions","background","backgroundColor","backgroundAlpha","setAlpha","shared","setValue","warn","colorRgba","toArray","priority","BackgroundSystem","BLEND_MODE_FILTERS","handle","BlendMode","ref","BlendModePipe","_blendModeStack","_isAdvanced","_filterHash","runners","prerender","_activeBlendMode","isRenderGroup","RenderGroup","_endAdvancedBlendMode","_beginAdvancedBlendMode","_renderableList","_ensureFilterEffect","renderables","imageTypes","png","jpg","webp","_ExtractSystem","_normalizeOptions","defaults","target","image","createImage","src","base64","defaultImageOptions","format","quality","toBlob","Promise","resolve","reject","blob","reader","FileReader","onload","result","onerror","readAsDataURL","toDataURL","convertToBlob","generateCanvas","textureGenerator","generateTexture","pixels","pixelInfo","getPixels","download","link","document","createElement","filename","href","body","appendChild","click","removeChild","log","console","join","ExtractSystem","RenderTexture","TextureSource","resize","tempRect","Rectangle","noColor","GenerateTextureSystem","textureSourceOptions","clearColor","Array","isArray","region","copyTo","rectangle","Math","max","updateMipmaps","GlobalUniformSystem","_stackIndex","_globalUniformDataStack","_uniformsPool","_activeUniforms","_bindGroupPool","_activeBindGroups","bind","projectionMatrix","currentGlobalUniformData","projectionData","Point","globalUniformData","bindGroup","_createUniforms","uProjectionMatrix","uResolution","uWorldTransformMatrix","uWorldColorAlpha","getUniformBindGroup","BindGroup","setResource","_currentGlobalUniformData","SchedulerSystem","_tasks","_offset","Ticker","system","_update","repeat","func","duration","useOffset","id","performance","now","last","cancel","splice","task","elapsed","remove","saidHello","HelloSystem","hello","context","webGLVersion","getNavigator","userAgent","toLowerCase","indexOf","args","globalThis","sayHello","cleanHash","hash","clean","cleanHash2","cleanArray","arr","renderableGCTick","_RenderableGCSystem","_managedRenderables","_managedHashes","_managedArrays","maxUnusedTime","renderableGCMaxUnusedTime","_frequency","renderableGCFrequency","enabled","renderableGCActive","_handler","scheduler","run","_hashHandler","_arrayHandler","array","addManagedHash","addManagedArray","_now","gcTick","_updateInstructionGCTick","_lastUsed","_removeRenderable","managedRenderables","currentTick","destroyed","rp","off","RenderableGCSystem","_TextureGCSystem","count","checkCount","checkCountMax","textureGCCheckCountMax","maxIdle","textureGCAMaxIdle","textureGCMaxIdle","active","textureGCActive","postrender","renderingToScreen","managedTextures","autoGarbageCollect","_touched","unload","TextureGCSystem","_ViewSystem","autoDensity","deprecation","screen","createCanvas","RenderTarget","colorTextures","depth","isRoot","transparent","desiredScreenWidth","desiredScreenHeight","removeView","parentNode","SharedSystems","SharedRenderPipes","localUniformBit","header","main","end","localUniformBitGroup2","replace","localUniformBitGl","_RenderTarget","descriptor","dirtyId","_size","_managedColorTextures","colorSource","on","onSourceResize","depthStencilTexture","ensureDepthStencilTexture","pixelWidth","pixelHeight","autoGenerateMipmaps","mipLevelCount","skipColorTexture","forEach","uniformParsers","test","a","ubo","uniform","red","ensureAttributes","extractedData","attributes","attribute","attributeData","instance","tempStride","tempStart","stride","ensureStartAndStride","color32BitToUniform","abgr","out","textureBit","textureBitGl","RenderTargetSystem","rootViewPort","viewport","onRenderTargetChange","SystemRunner","defaultClearColor","_renderSurfaceToRenderTargetHash","_gpuRenderTargetHash","_renderTargetStack","renderableGC","renderStart","rootRenderTarget","HTMLCanvasElement","contains","isRenderingToScreen","renderSurface","getRenderTarget","gpuRenderTarget","getGpuRenderTarget","resizeGpuRenderTarget","pm","flipY","sign","d","calculateProjection","startRenderPass","emit","ALL","contextChange","currentRenderTargetData","isTexture","_initRenderTarget","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","min","key","CanvasSource","destroyGpuRenderTarget","initGpuRenderTarget","resetState","BufferResource","_resourceType","_resourceId","_bufferResource","onBufferChange","destroyBuffer","createUboSyncFunction","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","uboElement","parsed","template","fragmentSrc","Function","GpuStencilModesToPixi","NONE","stencilWriteMask","stencilReadMask","stencilFront","compare","passOp","stencilBack"],"sourceRoot":""}