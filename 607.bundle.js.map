{"version":3,"file":"607.bundle.js","mappings":"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","sources":["webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/particle-container/gl/GlParticleContainerAdaptor.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/particle-container/shared/utils/createIndicesForQuads.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/particle-container/shared/utils/generateParticleUpdateFunction.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/particle-container/shared/ParticleBuffer.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.wgsl.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/particle-container/shared/shader/ParticleShader.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.vert.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.frag.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/particle-container/shared/ParticleContainerPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/particle-container/shared/GlParticleContainerPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/particle-container/gpu/GpuParticleContainerAdaptor.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/particle-container/shared/GpuParticleContainerPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/particle-container/init.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text/utils/updateTextBounds.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-html/BatchableHTMLText.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/utils/browser/isSafari.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-html/init.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/app/ResizePlugin.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/app/TickerPlugin.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/app/init.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text/canvas/BatchableText.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text/canvas/CanvasTextGenerator.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text/init.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/mesh/init.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/filters/FilterPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/filters/FilterSystem.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/filters/init.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","webpack://rts-game/./node_modules/.pnpm/pixi.js@8.13.2/node_modules/pixi.js/lib/scene/graphics/init.mjs"],"sourcesContent":["\"use strict\";\nclass GlParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const state = particleContainerPipe.state;\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.resources.uTexture = container.texture._source;\n    shader.resources.uniforms = particleContainerPipe.localUniforms;\n    const gl = renderer.gl;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.shader.bind(shader);\n    renderer.state.set(state);\n    renderer.geometry.bind(buffer.geometry, shader.glProgram);\n    const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n    const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n    gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n  }\n}\n\nexport { GlParticleContainerAdaptor };\n//# sourceMappingURL=GlParticleContainerAdaptor.mjs.map\n","\"use strict\";\nfunction createIndicesForQuads(size, outBuffer = null) {\n  const totalIndices = size * 6;\n  if (totalIndices > 65535) {\n    outBuffer || (outBuffer = new Uint32Array(totalIndices));\n  } else {\n    outBuffer || (outBuffer = new Uint16Array(totalIndices));\n  }\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n  }\n  for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\n\nexport { createIndicesForQuads };\n//# sourceMappingURL=createIndicesForQuads.mjs.map\n","import { getAttributeInfoFromFormat } from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction generateParticleUpdateFunction(properties) {\n  return {\n    dynamicUpdate: generateUpdateFunction(properties, true),\n    staticUpdate: generateUpdateFunction(properties, false)\n  };\n}\nfunction generateUpdateFunction(properties, dynamic) {\n  const funcFragments = [];\n  funcFragments.push(`\n\n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n  let offset = 0;\n  for (const i in properties) {\n    const property = properties[i];\n    if (dynamic !== property.dynamic)\n      continue;\n    funcFragments.push(`offset = index + ${offset}`);\n    funcFragments.push(property.code);\n    const attributeInfo = getAttributeInfoFromFormat(property.format);\n    offset += attributeInfo.stride / 4;\n  }\n  funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n  funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n  const functionSource = funcFragments.join(\"\\n\");\n  return new Function(\"ps\", \"f32v\", \"u32v\", functionSource);\n}\n\nexport { generateParticleUpdateFunction };\n//# sourceMappingURL=generateParticleUpdateFunction.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer.mjs';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads.mjs';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction.mjs';\n\n\"use strict\";\nclass ParticleBuffer {\n  constructor(options) {\n    this._size = 0;\n    this._generateParticleUpdateCache = {};\n    const size = this._size = options.size ?? 1e3;\n    const properties = options.properties;\n    let staticVertexSize = 0;\n    let dynamicVertexSize = 0;\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        dynamicVertexSize += attributeInfo.stride;\n      } else {\n        staticVertexSize += attributeInfo.stride;\n      }\n    }\n    this._dynamicStride = dynamicVertexSize / 4;\n    this._staticStride = staticVertexSize / 4;\n    this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n    this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n    this.indexBuffer = createIndicesForQuads(size);\n    const geometry = new Geometry();\n    let dynamicOffset = 0;\n    let staticOffset = 0;\n    this._staticBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"static-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    this._dynamicBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"dynamic-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._dynamicBuffer,\n          stride: this._dynamicStride * 4,\n          offset: dynamicOffset * 4,\n          format: property.format\n        });\n        dynamicOffset += attributeInfo.size;\n      } else {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._staticBuffer,\n          stride: this._staticStride * 4,\n          offset: staticOffset * 4,\n          format: property.format\n        });\n        staticOffset += attributeInfo.size;\n      }\n    }\n    geometry.addIndex(this.indexBuffer);\n    const uploadFunction = this.getParticleUpdate(properties);\n    this._dynamicUpload = uploadFunction.dynamicUpdate;\n    this._staticUpload = uploadFunction.staticUpdate;\n    this.geometry = geometry;\n  }\n  getParticleUpdate(properties) {\n    const key = getParticleSyncKey(properties);\n    if (this._generateParticleUpdateCache[key]) {\n      return this._generateParticleUpdateCache[key];\n    }\n    this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n    return this._generateParticleUpdateCache[key];\n  }\n  generateParticleUpdate(properties) {\n    return generateParticleUpdateFunction(properties);\n  }\n  update(particles, uploadStatic) {\n    if (particles.length > this._size) {\n      uploadStatic = true;\n      this._size = Math.max(particles.length, this._size * 1.5 | 0);\n      this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n      this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n      this.indexBuffer = createIndicesForQuads(this._size);\n      this.geometry.indexBuffer.setDataWithSize(\n        this.indexBuffer,\n        this.indexBuffer.byteLength,\n        true\n      );\n    }\n    const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n    this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n    this._dynamicBuffer.setDataWithSize(\n      this.dynamicAttributeBuffer.float32View,\n      particles.length * this._dynamicStride * 4,\n      true\n    );\n    if (uploadStatic) {\n      const staticAttributeBuffer = this.staticAttributeBuffer;\n      this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n      this._staticBuffer.setDataWithSize(\n        staticAttributeBuffer.float32View,\n        particles.length * this._staticStride * 4,\n        true\n      );\n    }\n  }\n  destroy() {\n    this._staticBuffer.destroy();\n    this._dynamicBuffer.destroy();\n    this.geometry.destroy();\n  }\n}\nfunction getParticleSyncKey(properties) {\n  const keyGen = [];\n  for (const key in properties) {\n    const property = properties[key];\n    keyGen.push(key, property.code, property.dynamic ? \"d\" : \"s\");\n  }\n  return keyGen.join(\"_\");\n}\n\nexport { ParticleBuffer };\n//# sourceMappingURL=ParticleBuffer.mjs.map\n","var wgsl = \"\\nstruct ParticleUniforms {\\n  uTranslationMatrix:mat3x3<f32>,\\n  uColor:vec4<f32>,\\n  uRound:f32,\\n  uResolution:vec2<f32>,\\n};\\n\\nfn roundPixels(position: vec2<f32>, targetSize: vec2<f32>) -> vec2<f32>\\n{\\n  return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\\n\\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\\n@group(1) @binding(1) var uSampler : sampler;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) color : vec4<f32>,\\n  };\\n@vertex\\nfn mainVertex(\\n  @location(0) aVertex: vec2<f32>,\\n  @location(1) aPosition: vec2<f32>,\\n  @location(2) aUV: vec2<f32>,\\n  @location(3) aColor: vec4<f32>,\\n  @location(4) aRotation: f32,\\n) -> VSOutput {\\n  \\n   let v = vec2(\\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\\n   ) + aPosition;\\n\\n   var position = vec4((uniforms.uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n   if(uniforms.uRound == 1.0) {\\n       position = vec4(roundPixels(position.xy, uniforms.uResolution), position.zw);\\n   }\\n\\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\\n\\n  return VSOutput(\\n   position,\\n   aUV,\\n   vColor,\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) color: vec4<f32>,\\n  @builtin(position) position: vec4<f32>,\\n) -> @location(0) vec4<f32> {\\n\\n    var sample = textureSample(uTexture, uSampler, uv) * color;\\n   \\n    return sample;\\n}\";\n\nexport { wgsl as default };\n//# sourceMappingURL=particles.wgsl.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport fragment from './particles.frag.mjs';\nimport vertex from './particles.vert.mjs';\nimport wgsl from './particles.wgsl.mjs';\n\n\"use strict\";\nclass ParticleShader extends Shader {\n  constructor() {\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment\n    });\n    const gpuProgram = GpuProgram.from({\n      fragment: {\n        source: wgsl,\n        entryPoint: \"mainFragment\"\n      },\n      vertex: {\n        source: wgsl,\n        entryPoint: \"mainVertex\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        // this will be replaced with the texture from the particle container\n        uTexture: Texture.WHITE.source,\n        // this will be replaced with the texture style from the particle container\n        uSampler: new TextureStyle({}),\n        // this will be replaced with the local uniforms from the particle container\n        uniforms: {\n          uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Color(16777215), type: \"vec4<f32>\" },\n          uRound: { value: 1, type: \"f32\" },\n          uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n        }\n      }\n    });\n  }\n}\n\nexport { ParticleShader };\n//# sourceMappingURL=ParticleShader.mjs.map\n","var vertex = \"attribute vec2 aVertex;\\nattribute vec2 aUV;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPosition;\\nattribute float aRotation;\\n\\nuniform mat3 uTranslationMatrix;\\nuniform float uRound;\\nuniform vec2 uResolution;\\nuniform vec4 uColor;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\n\\nvec2 roundPixels(vec2 position, vec2 targetSize)\\n{       \\n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\nvoid main(void){\\n    float cosRotation = cos(aRotation);\\n    float sinRotation = sin(aRotation);\\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPosition;\\n\\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    if(uRound == 1.0)\\n    {\\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\\n    }\\n\\n    vUV = aUV;\\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=particles.vert.mjs.map\n","var fragment = \"varying vec2 vUV;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uTexture;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uTexture, vUV) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nexport { fragment as default };\n//# sourceMappingURL=particles.frag.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { ParticleBuffer } from './ParticleBuffer.mjs';\nimport { ParticleShader } from './shader/ParticleShader.mjs';\n\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    /** @internal */\n    this.state = State.for2d();\n    /** Local uniforms that are used for rendering particles. */\n    this.localUniforms = new UniformGroup({\n      uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uRound: { value: 1, type: \"f32\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader();\n    this.state = State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return renderable._gpuData[this.renderer.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    renderable._gpuData[this.renderer.uid] = new ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    return renderable._gpuData[this.renderer.uid];\n  }\n  updateRenderable(_renderable) {\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    color32BitToUniform(\n      container.groupColorAlpha,\n      uniforms.uColor,\n      0\n    );\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    this.renderer = null;\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\n\nexport { ParticleContainerPipe };\n//# sourceMappingURL=ParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GlParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GlParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGlParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GlParticleContainerPipe };\n//# sourceMappingURL=GlParticleContainerPipe.mjs.map\n","\"use strict\";\nclass GpuParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n    shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n    const state = particleContainerPipe.state;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.encoder.draw({\n      geometry: buffer.geometry,\n      shader: container.shader || particleContainerPipe.defaultShader,\n      state,\n      size: container.particleChildren.length * 6\n    });\n  }\n}\n\nexport { GpuParticleContainerAdaptor };\n//# sourceMappingURL=GpuParticleContainerAdaptor.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GpuParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GpuParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGpuParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GpuParticleContainerPipe };\n//# sourceMappingURL=GpuParticleContainerPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe.mjs';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe.mjs';\n\n\"use strict\";\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            }\n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n\n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n\n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpriteGpuData {\n  constructor() {\n    this.canBatch = true;\n    this.geometry = new MeshGeometry({\n      indices: sharedQuad.indices.slice(),\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n  }\n  destroy() {\n    this.geometry.destroy();\n    this.shader?.destroy();\n  }\n}\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._renderer = renderer;\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        renderable.texture\n      );\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite.didViewUpdate) {\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.renderable = tilingSprite;\n        batchableMesh.transform = tilingSprite.groupTransform;\n        batchableMesh.setTexture(tilingSprite._texture);\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._getTilingSpriteData(tilingSprite);\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite.didViewUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh._batcher.updateElement(batchableMesh);\n    } else if (tilingSprite.didViewUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n  }\n  _getTilingSpriteData(renderable) {\n    return renderable._gpuData[this._renderer.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const gpuData = new TilingSpriteGpuData();\n    gpuData.renderable = tilingSprite;\n    tilingSprite._gpuData[this._renderer.uid] = gpuData;\n    return gpuData;\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpriteGpuData, TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite.applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\n\n\"use strict\";\nfunction updateTextBounds(batchableSprite, text) {\n  const { texture, bounds } = batchableSprite;\n  const padding = text._style._getFinalPadding();\n  updateQuadBounds(bounds, text._anchor, texture);\n  const paddingOffset = text._anchor._x * padding * 2;\n  const paddingOffsetY = text._anchor._y * padding * 2;\n  bounds.minX -= padding - paddingOffset;\n  bounds.minY -= padding - paddingOffsetY;\n  bounds.maxX -= padding - paddingOffset;\n  bounds.maxY -= padding - paddingOffsetY;\n}\n\nexport { updateTextBounds };\n//# sourceMappingURL=updateTextBounds.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    let uvs = options.uvs;\n    if (!uvs) {\n      if (options.positions) {\n        uvs = new Float32Array(positions.length);\n      } else {\n        uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n      }\n    }\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  /**\n   * Set the positions of the mesh.\n   * When setting the positions, its important that the uvs array is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The positions of the mesh.\n   */\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  /**\n   * Set the UVs of the mesh.\n   * Its important that the uvs array you set is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The UVs of the mesh.\n   */\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n","import { BatchableSprite } from '../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass BatchableHTMLText extends BatchableSprite {\n  /**\n   * Creates an instance of BatchableHTMLText.\n   * @param renderer - The renderer instance to be used.\n   */\n  constructor(renderer) {\n    super();\n    this.generatingTexture = false;\n    this.currentKey = \"--\";\n    this._renderer = renderer;\n    renderer.runners.resolutionChange.add(this);\n  }\n  /** Handles resolution changes for the HTML text. If the text has auto resolution enabled, it triggers a view update. */\n  resolutionChange() {\n    const text = this.renderable;\n    if (text._autoResolution) {\n      text.onViewUpdate();\n    }\n  }\n  /** Destroys the BatchableHTMLText instance. Returns the texture promise to the renderer and cleans up references. */\n  destroy() {\n    const { htmlText } = this._renderer;\n    htmlText.getReferenceCount(this.currentKey) === null ? htmlText.returnTexturePromise(this.texturePromise) : htmlText.decreaseReferenceCount(this.currentKey);\n    this._renderer.runners.resolutionChange.remove(this);\n    this.texturePromise = null;\n    this._renderer = null;\n  }\n}\n\nexport { BatchableHTMLText };\n//# sourceMappingURL=BatchableHTMLText.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateTextBounds } from '../text/utils/updateTextBounds.mjs';\nimport { BatchableHTMLText } from './BatchableHTMLText.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText.styleKey;\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText, instructionSet) {\n    const batchableHTMLText = this._getGpuText(htmlText);\n    if (htmlText._didTextUpdate) {\n      const resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n      if (batchableHTMLText.currentKey !== htmlText.styleKey || htmlText.resolution !== resolution) {\n        this._updateGpuText(htmlText).catch((e) => {\n          console.error(e);\n        });\n      }\n      htmlText._didTextUpdate = false;\n      updateTextBounds(batchableHTMLText, htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableHTMLText, instructionSet);\n  }\n  updateRenderable(htmlText) {\n    const batchableHTMLText = this._getGpuText(htmlText);\n    batchableHTMLText._batcher.updateElement(batchableHTMLText);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const batchableHTMLText = this._getGpuText(htmlText);\n    if (batchableHTMLText.generatingTexture)\n      return;\n    const oldTexturePromise = batchableHTMLText.texturePromise;\n    batchableHTMLText.texturePromise = null;\n    batchableHTMLText.generatingTexture = true;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    let texturePromise = this._renderer.htmlText.getTexturePromise(htmlText);\n    if (oldTexturePromise) {\n      texturePromise = texturePromise.finally(() => {\n        this._renderer.htmlText.decreaseReferenceCount(batchableHTMLText.currentKey);\n        this._renderer.htmlText.returnTexturePromise(oldTexturePromise);\n      });\n    }\n    batchableHTMLText.texturePromise = texturePromise;\n    batchableHTMLText.currentKey = htmlText.styleKey;\n    batchableHTMLText.texture = await texturePromise;\n    const renderGroup = htmlText.renderGroup || htmlText.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.structureDidChange = true;\n    }\n    batchableHTMLText.generatingTexture = false;\n    updateTextBounds(batchableHTMLText, htmlText);\n  }\n  _getGpuText(htmlText) {\n    return htmlText._gpuData[this._renderer.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const batchableHTMLText = new BatchableHTMLText(this._renderer);\n    batchableHTMLText.renderable = htmlText;\n    batchableHTMLText.transform = htmlText.groupTransform;\n    batchableHTMLText.texture = Texture.EMPTY;\n    batchableHTMLText.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableHTMLText.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    htmlText._gpuData[this._renderer.uid] = batchableHTMLText;\n    return batchableHTMLText;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n    this.image = DOMAdapter.get().createImage();\n  }\n  destroy() {\n    this.svgRoot.remove();\n    this.foreignObject.remove();\n    this.styleElement.remove();\n    this.domElement.remove();\n    this.image.src = \"\";\n    this.image.remove();\n    this.svgRoot = null;\n    this.foreignObject = null;\n    this.styleElement = null;\n    this.domElement = null;\n    this.image = null;\n    this.canvasAndContext = null;\n  }\n}\n\nexport { HTMLTextRenderData };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { entries } = Cache.get(`${fontFamily}-and-url`);\n      const promises = [];\n      entries.forEach((entry) => {\n        const url = entry.url;\n        const faces = entry.faces;\n        const out = faces.map((face) => ({ weight: face.weight, style: face.style }));\n        promises.push(\n          ...out.map(\n            (style) => loadFontCSS(\n              {\n                fontWeight: style.weight,\n                fontStyle: style.style,\n                fontFamily\n              },\n              url\n            )\n          )\n        );\n      });\n      FontStylePromiseCache.set(\n        fontFamily,\n        Promise.all(promises).then((css) => css.join(\"\\n\"))\n      );\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","import { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData || (htmlTextRenderData = tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData()));\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const doublePadding = style.padding * 2;\n  return {\n    width: contentBounds.width - doublePadding,\n    height: contentBounds.height - doublePadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  /**\n   * @param options\n   * @deprecated Use getTexturePromise instead\n   */\n  getTexture(options) {\n    return this.getTexturePromise(options);\n  }\n  /**\n   * Increases the reference count for a texture.\n   * @param text - The HTMLText instance associated with the texture.\n   */\n  getManagedTexture(text) {\n    const textKey = text.styleKey;\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  /**\n   * Gets the current reference count for a texture associated with a text key.\n   * @param textKey - The unique key identifying the text style configuration\n   * @returns The number of Text instances currently using this texture\n   */\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey]?.usageCount ?? null;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  /**\n   * Decreases the reference count for a texture.\n   * If the count reaches zero, the texture is cleaned up.\n   * @param textKey - The key associated with the HTMLText instance.\n   */\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture.texture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture.texture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  /**\n   * Returns a promise that resolves to a texture for the given HTMLText options.\n   * @param options - The options for the HTMLText.\n   * @returns A promise that resolves to a Texture.\n   */\n  getTexturePromise(options) {\n    return this._buildTexturePromise(options);\n  }\n  async _buildTexturePromise(options) {\n    const { text, style, resolution, textureStyle } = options;\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(fontFamilies);\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    const uvSafeOffset = 2;\n    image.width = (width | 0) + uvSafeOffset;\n    image.height = (height | 0) + uvSafeOffset;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    const resource = image;\n    let canvasAndContext;\n    if (this._createCanvas) {\n      canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(\n      canvasAndContext ? canvasAndContext.canvas : resource,\n      image.width - uvSafeOffset,\n      image.height - uvSafeOffset,\n      resolution\n    );\n    if (textureStyle)\n      texture.source.style = textureStyle;\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  returnTexturePromise(texturePromise) {\n    texturePromise.then((texture) => {\n      this._cleanUp(texture);\n    }).catch(() => {\n      warn(\"HTMLTextSystem: Failed to clean texture\");\n    });\n  }\n  _cleanUp(texture) {\n    TexturePool.returnTexture(texture, true);\n    texture.source.resource = null;\n    texture.source.uploadMethodId = \"unknown\";\n  }\n  destroy() {\n    this._renderer = null;\n    for (const key in this._activeTextures) {\n      if (this._activeTextures[key])\n        this.returnTexturePromise(this._activeTextures[key].promise);\n    }\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n        src: url('${dataSrc}');\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  return canvasAndContext;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nclass BatchableSprite {\n  constructor() {\n    this.batcherName = \"default\";\n    this.topology = \"triangle-list\";\n    // batch specific..\n    this.attributeSize = 4;\n    this.indexSize = 6;\n    this.packAsQuad = true;\n    this.roundPixels = 0;\n    this._attributeStart = 0;\n    // location in the buffer\n    this._batcher = null;\n    this._batch = null;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.bounds = null;\n  }\n  destroy() {\n  }\n}\n\nexport { BatchableSprite };\n//# sourceMappingURL=BatchableSprite.mjs.map\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n//# sourceMappingURL=PlaneGeometry.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this._anchorX = options.anchor?.x;\n    this._anchorY = options.anchor?.y;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const p = this.positions;\n    const {\n      width,\n      height,\n      _leftWidth,\n      _rightWidth,\n      _topHeight,\n      _bottomHeight,\n      _anchorX,\n      _anchorY\n    } = this;\n    const w = _leftWidth + _rightWidth;\n    const scaleW = width > w ? 1 : width / w;\n    const h = _topHeight + _bottomHeight;\n    const scaleH = height > h ? 1 : height / h;\n    const scale = Math.min(scaleW, scaleH);\n    const anchorOffsetX = _anchorX * width;\n    const anchorOffsetY = _anchorY * height;\n    p[0] = p[8] = p[16] = p[24] = -anchorOffsetX;\n    p[2] = p[10] = p[18] = p[26] = _leftWidth * scale - anchorOffsetX;\n    p[4] = p[12] = p[20] = p[28] = width - _rightWidth * scale - anchorOffsetX;\n    p[6] = p[14] = p[22] = p[30] = width - anchorOffsetX;\n    p[1] = p[3] = p[5] = p[7] = -anchorOffsetY;\n    p[9] = p[11] = p[13] = p[15] = _topHeight * scale - anchorOffsetY;\n    p[17] = p[19] = p[21] = p[23] = height - _bottomHeight * scale - anchorOffsetY;\n    p[25] = p[27] = p[29] = p[31] = height - anchorOffsetY;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpriteGpuData extends BatchableMesh {\n  constructor() {\n    super();\n    this.geometry = new NineSliceGeometry();\n  }\n  destroy() {\n    this.geometry.destroy();\n  }\n}\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.setTexture(sprite._texture);\n  }\n  _getGpuSprite(sprite) {\n    return sprite._gpuData[this._renderer.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const gpuData = sprite._gpuData[this._renderer.uid] = new NineSliceSpriteGpuData();\n    const batchableMesh = gpuData;\n    batchableMesh.renderable = sprite;\n    batchableMesh.transform = sprite.groupTransform;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    if (!sprite.didViewUpdate) {\n      this._updateBatchableSprite(sprite, batchableMesh);\n    }\n    return gpuData;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpriteGpuData, NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcherName = \"default\";\n    this.packAsQuad = false;\n    this.indexOffset = 0;\n    this.attributeOffset = 0;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n    this._textureMatrixUpdateId = -1;\n    this._uvUpdateId = -1;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get topology() {\n    return this._topology || this.geometry.topology;\n  }\n  set topology(value) {\n    this._topology = value;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.geometry = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  /**\n   * Sets the texture for the batchable mesh.\n   * As it does so, it resets the texture matrix update ID.\n   * this is to ensure that the texture matrix is recalculated when the uvs are referenced\n   * @param value - The texture to set.\n   */\n  setTexture(value) {\n    if (this.texture === value)\n      return;\n    this.texture = value;\n    this._textureMatrixUpdateId = -1;\n  }\n  get uvs() {\n    const geometry = this.geometry;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    return transformedUvs;\n  }\n  get positions() {\n    return this.geometry.positions;\n  }\n  get indices() {\n    return this.geometry.indices;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  get groupTransform() {\n    return this.renderable.groupTransform;\n  }\n  get attributeSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n","\"use strict\";\nconst localUniformBit = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace(\"group(1)\", \"group(2)\")\n  }\n};\nconst localUniformBitGl = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  }\n};\n\nexport { localUniformBit, localUniformBitGl, localUniformBitGroup2 };\n//# sourceMappingURL=localUniformBit.mjs.map\n","import { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass BatchableText extends BatchableSprite {\n  constructor(renderer) {\n    super();\n    this._renderer = renderer;\n    renderer.runners.resolutionChange.add(this);\n  }\n  resolutionChange() {\n    const text = this.renderable;\n    if (text._autoResolution) {\n      text.onViewUpdate();\n    }\n  }\n  destroy() {\n    const { canvasText } = this._renderer;\n    const refCount = canvasText.getReferenceCount(this.currentKey);\n    if (refCount > 0) {\n      canvasText.decreaseReferenceCount(this.currentKey);\n    } else if (this.texture) {\n      canvasText.returnTexture(this.texture);\n    }\n    this._renderer.runners.resolutionChange.remove(this);\n    this._renderer = null;\n  }\n}\n\nexport { BatchableText };\n//# sourceMappingURL=BatchableText.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { updateTextBounds } from '../utils/updateTextBounds.mjs';\nimport { BatchableText } from './BatchableText.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text.styleKey;\n    if (gpuText.currentKey !== newKey)\n      return true;\n    return text._didTextUpdate;\n  }\n  addRenderable(text, instructionSet) {\n    const batchableText = this._getGpuText(text);\n    if (text._didTextUpdate) {\n      const resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n      if (batchableText.currentKey !== text.styleKey || text.resolution !== resolution) {\n        this._updateGpuText(text);\n      }\n      text._didTextUpdate = false;\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableText, instructionSet);\n  }\n  updateRenderable(text) {\n    const batchableText = this._getGpuText(text);\n    batchableText._batcher.updateElement(batchableText);\n  }\n  _updateGpuText(text) {\n    const batchableText = this._getGpuText(text);\n    if (batchableText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(batchableText.currentKey);\n    }\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    batchableText.texture = this._renderer.canvasText.getManagedTexture(text);\n    batchableText.currentKey = text.styleKey;\n    updateTextBounds(batchableText, text);\n  }\n  _getGpuText(text) {\n    return text._gpuData[this._renderer.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const batchableText = new BatchableText(this._renderer);\n    batchableText.currentKey = \"--\";\n    batchableText.renderable = text;\n    batchableText.transform = text.groupTransform;\n    batchableText.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableText.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    text._gpuData[this._renderer.uid] = batchableText;\n    return batchableText;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\nimport { nextPow2 } from '../../maths/misc/pow2.mjs';\nimport { Rectangle } from '../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nlet _internalCanvas = null;\nlet _internalContext = null;\nfunction ensureInternalCanvas(width, height) {\n  if (!_internalCanvas) {\n    _internalCanvas = DOMAdapter.get().createCanvas(256, 128);\n    _internalContext = _internalCanvas.getContext(\"2d\", { willReadFrequently: true });\n    _internalContext.globalCompositeOperation = \"copy\";\n    _internalContext.globalAlpha = 1;\n  }\n  if (_internalCanvas.width < width || _internalCanvas.height < height) {\n    _internalCanvas.width = nextPow2(width);\n    _internalCanvas.height = nextPow2(height);\n  }\n}\nfunction checkRow(data, width, y) {\n  for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction checkColumn(data, width, x, top, bottom) {\n  const stride = 4 * width;\n  for (let y = top, index = top * stride + 4 * x; y <= bottom; ++y, index += stride) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction getCanvasBoundingBox(...args) {\n  let options = args[0];\n  if (!options.canvas) {\n    options = { canvas: args[0], resolution: args[1] };\n  }\n  const { canvas } = options;\n  const resolution = Math.min(options.resolution ?? 1, 1);\n  const width = options.width ?? canvas.width;\n  const height = options.height ?? canvas.height;\n  let output = options.output;\n  ensureInternalCanvas(width, height);\n  if (!_internalContext) {\n    throw new TypeError(\"Failed to get canvas 2D context\");\n  }\n  _internalContext.drawImage(\n    canvas,\n    0,\n    0,\n    width,\n    height,\n    0,\n    0,\n    width * resolution,\n    height * resolution\n  );\n  const imageData = _internalContext.getImageData(0, 0, width, height);\n  const data = imageData.data;\n  let left = 0;\n  let top = 0;\n  let right = width - 1;\n  let bottom = height - 1;\n  while (top < height && checkRow(data, width, top))\n    ++top;\n  if (top === height)\n    return Rectangle.EMPTY;\n  while (checkRow(data, width, bottom))\n    --bottom;\n  while (checkColumn(data, width, left, top, bottom))\n    ++left;\n  while (checkColumn(data, width, right, top, bottom))\n    --right;\n  ++right;\n  ++bottom;\n  _internalContext.globalCompositeOperation = \"source-over\";\n  _internalContext.strokeRect(left, top, right - left, bottom - top);\n  _internalContext.globalCompositeOperation = \"copy\";\n  output ?? (output = new Rectangle());\n  output.set(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n  return output;\n}\n\nexport { getCanvasBoundingBox };\n//# sourceMappingURL=getCanvasBoundingBox.mjs.map\n","import { Color } from '../../../color/Color.mjs';\nimport { Rectangle } from '../../../maths/shapes/Rectangle.mjs';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox.mjs';\nimport { CanvasTextMetrics } from './CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle.mjs';\n\n\"use strict\";\nconst tempRect = new Rectangle();\nclass CanvasTextGeneratorClass {\n  /**\n   * Creates a canvas with the specified text rendered to it.\n   *\n   * Generates a canvas of appropriate size, renders the text with the provided style,\n   * and returns both the canvas/context and a Rectangle representing the text bounds.\n   *\n   * When trim is enabled in the style, the frame will represent the bounds of the\n   * non-transparent pixels, which can be smaller than the full canvas.\n   * @param options - The options for generating the text canvas\n   * @param options.text - The text to render\n   * @param options.style - The style to apply to the text\n   * @param options.resolution - The resolution of the canvas (defaults to 1)\n   * @param options.padding\n   * @returns An object containing the canvas/context and the frame (bounds) of the text\n   */\n  getCanvasAndContext(options) {\n    const { text, style, resolution = 1 } = options;\n    const padding = style._getFinalPadding();\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n    this._renderTextToCanvas(text, style, padding, resolution, canvasAndContext);\n    const frame = style.trim ? getCanvasBoundingBox({ canvas: canvasAndContext.canvas, width, height, resolution: 1, output: tempRect }) : tempRect.set(0, 0, width, height);\n    return {\n      canvasAndContext,\n      frame\n    };\n  }\n  /**\n   * Returns a canvas and context to the pool.\n   *\n   * This should be called when you're done with the canvas to allow reuse\n   * and prevent memory leaks.\n   * @param canvasAndContext - The canvas and context to return to the pool\n   */\n  returnCanvasAndContext(canvasAndContext) {\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   * @param text - The text to render\n   * @param style - The style of the text\n   * @param padding - The padding of the text\n   * @param resolution - The resolution of the text\n   * @param canvasAndContext - The canvas and context to render the text to\n   */\n  _renderTextToCanvas(text, style, padding, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    context.textBaseline = style.textBaseline;\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context, measured, padding * 2) : null;\n        if (style._stroke?.width) {\n          const strokePadding = style._stroke.width * 0.5 + padding * 2;\n          context.strokeStyle = getCanvasFillStyle(style._stroke, context, measured, strokePadding);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + padding,\n            linePositionY + padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + padding,\n            linePositionY + padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   *\n   * This method handles rendering text with the correct letter spacing, using either:\n   * 1. Native letter spacing if supported by the browser\n   * 2. Manual letter spacing calculation if not natively supported\n   *\n   * For manual letter spacing, it calculates the position of each character\n   * based on its width and the desired spacing.\n   * @param text - The text to draw\n   * @param style - The text style to apply\n   * @param canvasAndContext - The canvas and context to draw to\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Whether to render the stroke (true) or fill (false)\n   * @private\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n}\nconst CanvasTextGenerator = new CanvasTextGeneratorClass();\n\nexport { CanvasTextGenerator };\n//# sourceMappingURL=CanvasTextGenerator.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { TextureStyle } from '../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextGenerator } from './CanvasTextGenerator.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTexture(options, _resolution, _style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style: _style,\n        resolution: _resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    if (!(options.textureStyle instanceof TextureStyle)) {\n      options.textureStyle = new TextureStyle(options.textureStyle);\n    }\n    if (typeof options.text !== \"string\") {\n      options.text = options.text.toString();\n    }\n    const { text, style, textureStyle } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const { frame, canvasAndContext } = CanvasTextGenerator.getCanvasAndContext({\n      text,\n      style,\n      resolution\n    });\n    const texture = getPo2TextureFromSource(canvasAndContext.canvas, frame.width, frame.height, resolution);\n    if (textureStyle)\n      texture.source.style = textureStyle;\n    if (style.trim) {\n      frame.pad(style.padding);\n      texture.frame.copyFrom(frame);\n      texture.frame.scale(1 / resolution);\n      texture.updateUvs();\n    }\n    if (style.filters) {\n      const filteredTexture = this._applyFilters(texture, style.filters);\n      this.returnTexture(texture);\n      CanvasTextGenerator.returnCanvasAndContext(canvasAndContext);\n      return filteredTexture;\n    }\n    this._renderer.texture.initSource(texture._source);\n    CanvasTextGenerator.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  /**\n   * Returns a texture that was created wit the above `getTexture` function.\n   * Handy if you are done with a texture and want to return it to the pool.\n   * @param texture - The texture to be returned.\n   */\n  returnTexture(texture) {\n    const source = texture.source;\n    source.resource = null;\n    source.uploadMethodId = \"unknown\";\n    source.alphaMode = \"no-premultiply-alpha\";\n    TexturePool.returnTexture(texture, true);\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   * @deprecated since 8.10.0\n   */\n  renderTextToCanvas() {\n    deprecation(\n      \"8.10.0\",\n      \"CanvasTextSystem.renderTextToCanvas: no longer supported, use CanvasTextSystem.getTexture instead\"\n    );\n  }\n  /**\n   * Gets or creates a managed texture for a Text object. This method handles texture reuse and reference counting.\n   * @param text - The Text object that needs a texture\n   * @returns A Texture instance that represents the rendered text\n   * @remarks\n   * This method performs the following:\n   * 1. Sets the appropriate resolution based on auto-resolution settings\n   * 2. Checks if a texture already exists for the text's style\n   * 3. Creates a new texture if needed or returns an existing one\n   * 4. Manages reference counting for texture reuse\n   */\n  getManagedTexture(text) {\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    const textKey = text.styleKey;\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const texture = this.getTexture({\n      text: text.text,\n      style: text.style,\n      resolution: text._resolution,\n      textureStyle: text.textureStyle\n    });\n    this._activeTextures[textKey] = {\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  /**\n   * Decreases the reference count for a texture associated with a text key.\n   * When the reference count reaches zero, the texture is returned to the pool.\n   * @param textKey - The unique key identifying the text style configuration\n   * @remarks\n   * This method is crucial for memory management, ensuring textures are properly\n   * cleaned up when they are no longer needed by any Text instances.\n   */\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      this.returnTexture(activeTexture.texture);\n      this._activeTextures[textKey] = null;\n    }\n  }\n  /**\n   * Gets the current reference count for a texture associated with a text key.\n   * @param textKey - The unique key identifying the text style configuration\n   * @returns The number of Text instances currently using this texture\n   */\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey]?.usageCount ?? 0;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  /**\n   * Applies the specified filters to the given texture.\n   *\n   * This method takes a texture and a list of filters, applies the filters to the texture,\n   * and returns the resulting texture. It also ensures that the alpha mode of the resulting\n   * texture is set to 'premultiplied-alpha'.\n   * @param {Texture} texture - The texture to which the filters will be applied.\n   * @param {Filter[]} filters - The filters to apply to the texture.\n   * @returns {Texture} The resulting texture after all filters have been applied.\n   */\n  _applyFilters(texture, filters) {\n    const currentRenderTarget = this._renderer.renderTarget.renderTarget;\n    const resultTexture = this._renderer.filter.generateFilteredTexture({\n      texture,\n      filters\n    });\n    this._renderer.renderTarget.bind(currentRenderTarget, false);\n    return resultTexture;\n  }\n  destroy() {\n    this._renderer = null;\n    for (const key in this._activeTextures) {\n      if (this._activeTextures[key])\n        this.returnTexture(this._activeTextures[key].texture);\n    }\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nfunction colorToUniform(rgb, alpha, out, offset) {\n  out[offset++] = (rgb >> 16 & 255) / 255;\n  out[offset++] = (rgb >> 8 & 255) / 255;\n  out[offset++] = (rgb & 255) / 255;\n  out[offset++] = alpha;\n}\nfunction color32BitToUniform(abgr, out, offset) {\n  const alpha = (abgr >> 24 & 255) / 255;\n  out[offset++] = (abgr & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 8 & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 16 & 255) / 255 * alpha;\n  out[offset++] = alpha;\n}\n\nexport { color32BitToUniform, colorToUniform };\n//# sourceMappingURL=colorToUniform.mjs.map\n","\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      `\n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n\n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n\n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n\n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor(maxTextures) {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextGraphics extends Graphics {\n  destroy() {\n    if (this.context.customShader) {\n      this.context.customShader.destroy();\n    }\n    super.destroy();\n  }\n}\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = new SdfShader(this._renderer.limits.maxBatchableTextures);\n      }\n    }\n    const chars = CanvasTextMetrics.graphemeSegmenter(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    let fontSize = bitmapFont.fontMetrics.fontSize;\n    let lineHeight = bitmapFont.lineHeight;\n    if (style.lineHeight) {\n      fontSize = style.fontSize / scale;\n      lineHeight = style.lineHeight / scale;\n    }\n    let linePositionYShift = (lineHeight - fontSize) / 2;\n    if (linePositionYShift - bitmapFont.baseLineOffset < 0) {\n      linePositionYShift = 0;\n    }\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = line.chars[j];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          const texture = charData.texture;\n          context.texture(\n            texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset + linePositionYShift),\n            texture.orig.width,\n            texture.orig.height\n          );\n        }\n      }\n      currentY += lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return bitmapText._gpuData[this._renderer.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = new BitmapTextGraphics();\n    bitmapText._gpuData[this._renderer.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    return proxyRenderable;\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextGraphics, BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshGpuData {\n  destroy() {\n  }\n}\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      if (batchableMesh.texture.uid !== mesh._texture.uid) {\n        batchableMesh._textureMatrixUpdateId = -1;\n      }\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        mesh._texture\n      );\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const meshData = this._getMeshData(mesh);\n    if (mesh.didViewUpdate) {\n      meshData.indexSize = mesh._geometry.indices?.length;\n      meshData.vertexSize = mesh._geometry.positions?.length;\n    }\n    if (meshData.batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add(mesh);\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  execute(mesh) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    var _a, _b;\n    (_a = mesh._gpuData)[_b = this.renderer.uid] || (_a[_b] = new MeshGpuData());\n    return mesh._gpuData[this.renderer.uid].meshData || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    mesh._gpuData[this.renderer.uid].meshData = {\n      batched: mesh.batched,\n      indexSize: 0,\n      vertexSize: 0\n    };\n    return mesh._gpuData[this.renderer.uid].meshData;\n  }\n  _getBatchableMesh(mesh) {\n    var _a, _b;\n    (_a = mesh._gpuData)[_b = this.renderer.uid] || (_a[_b] = new MeshGpuData());\n    return mesh._gpuData[this.renderer.uid].batchableMesh || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = new BatchableMesh();\n    gpuMesh.renderable = mesh;\n    gpuMesh.setTexture(mesh._texture);\n    gpuMesh.transform = mesh.groupTransform;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    mesh._gpuData[this.renderer.uid].batchableMesh = gpuMesh;\n    return gpuMesh;\n  }\n  destroy() {\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshGpuData, MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","import '../../../maths/index.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\n\n\"use strict\";\nconst tempProjectionMatrix = new Matrix();\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const actualMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n    if (renderGroup?.isCachedAsTexture) {\n      bounds.matrix = tempProjectionMatrix.copyFrom(renderGroup.textureOffsetInverseTransform).append(renderable.worldTransform);\n    } else if (renderGroup?._parentCacheAsTextureRenderGroup) {\n      bounds.matrix = tempProjectionMatrix.copyFrom(renderGroup._parentCacheAsTextureRenderGroup.inverseWorldTransform).append(renderable.groupTransform);\n    } else {\n      bounds.matrix = renderable.worldTransform;\n    }\n    bounds.addBounds(renderable.bounds);\n  }\n  bounds.matrix = actualMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterData {\n  constructor() {\n    /**\n     * Indicates whether the filter should be skipped.\n     * @type {boolean}\n     */\n    this.skip = false;\n    /**\n     * The texture to which the filter is applied.\n     * @type {Texture}\n     */\n    this.inputTexture = null;\n    /**\n     * The back texture used for blending, if required.\n     * @type {Texture | null}\n     */\n    this.backTexture = null;\n    /**\n     * The list of filters to be applied.\n     * @type {Filter[]}\n     */\n    this.filters = null;\n    /**\n     * The bounds of the filter area.\n     * @type {Bounds}\n     */\n    this.bounds = new Bounds();\n    /**\n     * The container to which the filter is applied.\n     * @type {Container}\n     */\n    this.container = null;\n    /**\n     * Indicates whether blending is required for the filter.\n     * @type {boolean}\n     */\n    this.blendRequired = false;\n    /**\n     * The render surface where the output of the filter is rendered.\n     * @type {RenderSurface}\n     */\n    this.outputRenderSurface = null;\n    /**\n     * The global frame of the filter area.\n     * @type {{ x: number, y: number, width: number, height: number }}\n     */\n    this.globalFrame = { x: 0, y: 0, width: 0, height: 0 };\n  }\n}\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  /**\n   * Pushes a filter instruction onto the filter stack.\n   * @param instruction - The instruction containing the filter effect and container.\n   * @internal\n   */\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    const filterData = this._pushFilterData();\n    filterData.skip = false;\n    filterData.filters = filters;\n    filterData.container = instruction.container;\n    filterData.outputRenderSurface = renderer.renderTarget.renderSurface;\n    const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n    const rootResolution = colorTextureSource.resolution;\n    const rootAntialias = colorTextureSource.antialias;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    this._calculateFilterArea(instruction, bounds);\n    this._calculateFilterBounds(filterData, renderer.renderTarget.rootViewPort, rootAntialias, rootResolution, 1);\n    if (filterData.skip) {\n      return;\n    }\n    const previousFilterData = this._getPreviousFilterData();\n    const globalResolution = this._findFilterResolution(rootResolution);\n    let offsetX = 0;\n    let offsetY = 0;\n    if (previousFilterData) {\n      offsetX = previousFilterData.bounds.minX;\n      offsetY = previousFilterData.bounds.minY;\n    }\n    this._calculateGlobalFrame(\n      filterData,\n      offsetX,\n      offsetY,\n      globalResolution,\n      colorTextureSource.width,\n      colorTextureSource.height\n    );\n    this._setupFilterTextures(filterData, bounds, renderer, previousFilterData);\n  }\n  /**\n   * Applies filters to a texture.\n   *\n   * This method takes a texture and a list of filters, applies the filters to the texture,\n   * and returns the resulting texture.\n   * @param {object} params - The parameters for applying filters.\n   * @param {Texture} params.texture - The texture to apply filters to.\n   * @param {Filter[]} params.filters - The filters to apply.\n   * @returns {Texture} The resulting texture after all filters have been applied.\n   * @example\n   *\n   * ```ts\n   * // Create a texture and a list of filters\n   * const texture = new Texture(...);\n   * const filters = [new BlurFilter(), new ColorMatrixFilter()];\n   *\n   * // Apply the filters to the texture\n   * const resultTexture = filterSystem.applyToTexture({ texture, filters });\n   *\n   * // Use the resulting texture\n   * sprite.texture = resultTexture;\n   * ```\n   *\n   * Key Points:\n   * 1. padding is not currently supported here - so clipping may occur with filters that use padding.\n   * 2. If all filters are disabled or skipped, the original texture is returned.\n   */\n  generateFilteredTexture({ texture, filters }) {\n    const filterData = this._pushFilterData();\n    this._activeFilterData = filterData;\n    filterData.skip = false;\n    filterData.filters = filters;\n    const colorTextureSource = texture.source;\n    const rootResolution = colorTextureSource.resolution;\n    const rootAntialias = colorTextureSource.antialias;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return texture;\n    }\n    const bounds = filterData.bounds;\n    bounds.addRect(texture.frame);\n    this._calculateFilterBounds(filterData, bounds.rectangle, rootAntialias, rootResolution, 0);\n    if (filterData.skip) {\n      return texture;\n    }\n    const globalResolution = rootResolution;\n    const offsetX = 0;\n    const offsetY = 0;\n    this._calculateGlobalFrame(\n      filterData,\n      offsetX,\n      offsetY,\n      globalResolution,\n      colorTextureSource.width,\n      colorTextureSource.height\n    );\n    filterData.outputRenderSurface = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      filterData.resolution,\n      filterData.antialias\n    );\n    filterData.backTexture = Texture.EMPTY;\n    filterData.inputTexture = texture;\n    const renderer = this.renderer;\n    renderer.renderTarget.finishRenderPass();\n    this._applyFiltersToTexture(filterData, true);\n    const outputTexture = filterData.outputRenderSurface;\n    outputTexture.source.alphaMode = \"premultiplied-alpha\";\n    return outputTexture;\n  }\n  /** @internal */\n  pop() {\n    const renderer = this.renderer;\n    const filterData = this._popFilterData();\n    if (filterData.skip) {\n      return;\n    }\n    renderer.globalUniforms.pop();\n    renderer.renderTarget.finishRenderPass();\n    this._activeFilterData = filterData;\n    this._applyFiltersToTexture(filterData, false);\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(filterData.backTexture);\n    }\n    TexturePool.returnTexture(filterData.inputTexture);\n  }\n  /**\n   * Copies the last render surface to a texture.\n   * @param lastRenderSurface - The last render surface to copy from.\n   * @param bounds - The bounds of the area to copy.\n   * @param previousBounds - The previous bounds to use for offsetting the copy.\n   */\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  /**\n   * Applies a filter to a texture.\n   * @param filter - The filter to apply.\n   * @param input - The input texture.\n   * @param output - The output render surface.\n   * @param clear - Whether to clear the output surface before applying the filter.\n   */\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._activeFilterData;\n    const outputRenderSurface = filterData.outputRenderSurface;\n    const isFinalTarget = outputRenderSurface === output;\n    const rootResolution = renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    const resolution = this._findFilterResolution(rootResolution);\n    let offsetX = 0;\n    let offsetY = 0;\n    if (isFinalTarget) {\n      const offset = this._findPreviousFilterOffset();\n      offsetX = offset.x;\n      offsetY = offset.y;\n    }\n    this._updateFilterUniforms(input, output, filterData, offsetX, offsetY, resolution, isFinalTarget, clear);\n    this._setupBindGroupsAndRender(filter, input, renderer);\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n    if (renderGroup && renderGroup.cacheToLocalTransform) {\n      worldTransform.prepend(renderGroup.cacheToLocalTransform);\n    }\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.orig.width,\n      1 / sprite.texture.orig.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n  destroy() {\n  }\n  /**\n   * Sets up the bind groups and renders the filter.\n   * @param filter - The filter to apply\n   * @param input - The input texture\n   * @param renderer - The renderer instance\n   */\n  _setupBindGroupsAndRender(filter, input, renderer) {\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(this._filterGlobalUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(this._filterGlobalUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  /**\n   * Sets up the filter textures including input texture and back texture if needed.\n   * @param filterData - The filter data to update\n   * @param bounds - The bounds for the texture\n   * @param renderer - The renderer instance\n   * @param previousFilterData - The previous filter data for back texture calculation\n   */\n  _setupFilterTextures(filterData, bounds, renderer, previousFilterData) {\n    filterData.backTexture = Texture.EMPTY;\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      filterData.resolution,\n      filterData.antialias\n    );\n    if (filterData.blendRequired) {\n      renderer.renderTarget.finishRenderPass();\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.outputRenderSurface);\n      filterData.backTexture = this.getBackTexture(renderTarget, bounds, previousFilterData?.bounds);\n    }\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  /**\n   * Calculates and sets the global frame for the filter.\n   * @param filterData - The filter data to update\n   * @param offsetX - The X offset\n   * @param offsetY - The Y offset\n   * @param globalResolution - The global resolution\n   * @param sourceWidth - The source texture width\n   * @param sourceHeight - The source texture height\n   */\n  _calculateGlobalFrame(filterData, offsetX, offsetY, globalResolution, sourceWidth, sourceHeight) {\n    const globalFrame = filterData.globalFrame;\n    globalFrame.x = offsetX * globalResolution;\n    globalFrame.y = offsetY * globalResolution;\n    globalFrame.width = sourceWidth * globalResolution;\n    globalFrame.height = sourceHeight * globalResolution;\n  }\n  /**\n   * Updates the filter uniforms with the current filter state.\n   * @param input - The input texture\n   * @param output - The output render surface\n   * @param filterData - The current filter data\n   * @param offsetX - The X offset for positioning\n   * @param offsetY - The Y offset for positioning\n   * @param resolution - The current resolution\n   * @param isFinalTarget - Whether this is the final render target\n   * @param clear - Whether to clear the output surface\n   */\n  _updateFilterUniforms(input, output, filterData, offsetX, offsetY, resolution, isFinalTarget, clear) {\n    const uniforms = this._filterGlobalUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      outputFrame[0] = filterData.bounds.minX - offsetX;\n      outputFrame[1] = filterData.bounds.minY - offsetY;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offsetX * resolution;\n    globalFrame[1] = offsetY * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    if (output instanceof Texture)\n      output.source.resource = null;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    this.renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    this._filterGlobalUniforms.update();\n  }\n  /**\n   * Finds the correct resolution by looking back through the filter stack.\n   * @param rootResolution - The fallback root resolution to use\n   * @returns The resolution from the previous filter or root resolution\n   */\n  _findFilterResolution(rootResolution) {\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    return currentIndex > 0 && this._filterStack[currentIndex].inputTexture ? this._filterStack[currentIndex].inputTexture.source._resolution : rootResolution;\n  }\n  /**\n   * Finds the offset from the previous non-skipped filter in the stack.\n   * @returns The offset coordinates from the previous filter\n   */\n  _findPreviousFilterOffset() {\n    let offsetX = 0;\n    let offsetY = 0;\n    let lastIndex = this._filterStackIndex;\n    while (lastIndex > 0) {\n      lastIndex--;\n      const prevFilterData = this._filterStack[lastIndex];\n      if (!prevFilterData.skip) {\n        offsetX = prevFilterData.bounds.minX;\n        offsetY = prevFilterData.bounds.minY;\n        break;\n      }\n    }\n    return { x: offsetX, y: offsetY };\n  }\n  /**\n   * Calculates the filter area bounds based on the instruction type.\n   * @param instruction - The filter instruction\n   * @param bounds - The bounds object to populate\n   */\n  _calculateFilterArea(instruction, bounds) {\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      instruction.container.getFastGlobalBounds(true, bounds);\n    }\n    if (instruction.container) {\n      const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n      const filterFrameTransform = renderGroup.cacheToLocalTransform;\n      if (filterFrameTransform) {\n        bounds.applyMatrix(filterFrameTransform);\n      }\n    }\n  }\n  _applyFiltersToTexture(filterData, clear) {\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    const filters = filterData.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(filterData.backTexture.source, 3);\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.outputRenderSurface, clear);\n    } else {\n      let flip = filterData.inputTexture;\n      const tempTexture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let flop = tempTexture;\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.outputRenderSurface, clear);\n      TexturePool.returnTexture(tempTexture);\n    }\n  }\n  _calculateFilterBounds(filterData, viewPort, rootAntialias, rootResolution, paddingMultiplier) {\n    const renderer = this.renderer;\n    const bounds = filterData.bounds;\n    const filters = filterData.filters;\n    let resolution = Infinity;\n    let padding = 0;\n    let antialias = true;\n    let blendRequired = false;\n    let enabled = false;\n    let clipToViewport = true;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution === \"inherit\" ? rootResolution : filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias === \"off\") {\n        antialias = false;\n      } else if (filter.antialias === \"inherit\") {\n        antialias && (antialias = rootAntialias);\n      }\n      if (!filter.clipToViewport) {\n        clipToViewport = false;\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired || (blendRequired = filter.blendRequired);\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    if (clipToViewport) {\n      bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n    }\n    bounds.scale(resolution).ceil().scale(1 / resolution).pad((padding | 0) * paddingMultiplier);\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.antialias = antialias;\n    filterData.resolution = resolution;\n    filterData.blendRequired = blendRequired;\n  }\n  _popFilterData() {\n    this._filterStackIndex--;\n    return this._filterStack[this._filterStackIndex];\n  }\n  _getPreviousFilterData() {\n    let previousFilterData;\n    let index = this._filterStackIndex - 1;\n    while (index > 0) {\n      index--;\n      previousFilterData = this._filterStack[index];\n      if (!previousFilterData.skip) {\n        break;\n      }\n    }\n    return previousFilterData;\n  }\n  _pushFilterData() {\n    let filterData = this._filterStack[this._filterStackIndex];\n    if (!filterData) {\n      filterData = this._filterStack[this._filterStackIndex] = new FilterData();\n    }\n    this._filterStackIndex++;\n    return filterData;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsGpuData {\n  constructor() {\n    this.batches = [];\n    this.batched = false;\n  }\n  destroy() {\n    this.batches.forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this.batches.length = 0;\n  }\n}\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this.renderer.runners.contextChange.add(this);\n  }\n  contextChange() {\n    this._adaptor.contextChange(this.renderer);\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!graphics._gpuData;\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics.didViewUpdate) {\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const gpuData = this._getGpuDataForRenderable(graphics);\n    const batches = gpuData.batches;\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batch._batcher.updateElement(batch);\n    }\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const gpuData = this._getGpuDataForRenderable(graphics);\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    gpuData.destroy();\n    if (gpuContext.isBatchable) {\n      this._updateBatchesForRenderable(graphics, gpuData);\n    }\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getGpuDataForRenderable(graphics).batches;\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getGpuDataForRenderable(graphics) {\n    return graphics._gpuData[this.renderer.uid] || this._initGpuDataForRenderable(graphics);\n  }\n  _initGpuDataForRenderable(graphics) {\n    const gpuData = new GraphicsGpuData();\n    graphics._gpuData[this.renderer.uid] = gpuData;\n    return gpuData;\n  }\n  _updateBatchesForRenderable(graphics, gpuData) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    gpuData.batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsGpuData, GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n"],"names":["GlParticleContainerAdaptor","execute","particleContainerPipe","container","state","renderer","shader","defaultShader","resources","uTexture","texture","_source","uniforms","localUniforms","gl","buffer","getBuffers","bind","set","geometry","glProgram","glType","indexBuffer","data","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","TRIANGLES","particleChildren","length","createIndicesForQuads","size","outBuffer","totalIndices","Uint32Array","Uint16Array","Error","i","j","generateUpdateFunction","properties","dynamic","funcFragments","push","offset","property","code","getAttributeInfoFromFormat","format","stride","unshift","functionSource","join","Function","ParticleBuffer","constructor","options","this","_size","_generateParticleUpdateCache","staticVertexSize","dynamicVertexSize","attributeInfo","_dynamicStride","_staticStride","staticAttributeBuffer","ViewableBuffer","dynamicAttributeBuffer","Geometry","dynamicOffset","staticOffset","_staticBuffer","Buffer","Float32Array","label","shrinkToFit","usage","VERTEX","COPY_DST","_dynamicBuffer","addAttribute","attributeName","addIndex","uploadFunction","getParticleUpdate","_dynamicUpload","dynamicUpdate","_staticUpload","staticUpdate","key","keyGen","getParticleSyncKey","generateParticleUpdate","generateParticleUpdateFunction","update","particles","uploadStatic","Math","max","setDataWithSize","byteLength","float32View","uint32View","destroy","wgsl","ParticleShader","Shader","super","GlProgram","from","vertex","fragment","gpuProgram","GpuProgram","source","entryPoint","Texture","WHITE","uSampler","TextureStyle","uTranslationMatrix","value","Matrix","type","uColor","Color","uRound","uResolution","ParticleContainerPipe","adaptor","State","for2d","UniformGroup","validateRenderable","_renderable","addRenderable","renderable","instructionSet","renderPipes","batch","break","add","_gpuData","uid","_initBuffer","_properties","updateRenderable","children","_childrenDirty","blendMode","getAdjustedBlendModeBlend","transformationMatrix","worldTransform","copyTo","prepend","globalUniforms","globalUniformData","projectionMatrix","resolution","_roundPixels","groupColorAlpha","GlParticleContainerPipe","extension","WebGLPipes","name","GpuParticleContainerAdaptor","groups","uniformBatch","getUniformBindGroup","getTextureBindGroup","encoder","draw","GpuParticleContainerPipe","WebGPUPipes","tilingBit","header","main","tilingBitGl","TilingSpriteShader","bits","localUniformBit","roundPixelsBit","tilingUniforms","uMapCoord","uClampFrame","uClampOffset","uTextureTransform","uSizeAnchor","uTransformMatrix","EMPTY","style","updateUniforms","width","height","matrix","anchorX","anchorY","textureWidth","textureHeight","textureMatrix","a","b","c","d","tx","ty","invert","mapCoord","QuadGeometry","MeshGeometry","positions","uvs","indices","sharedQuad","TilingSpriteGpuData","canBatch","slice","TilingSpritePipe","_state","default2d","_renderer","tilingSpriteData","_getTilingSpriteData","couldBatch","_updateCanBatch","batchableMesh","_batcher","checkAndUpdateTexture","tilingSprite","batcher","BatchableMesh","didViewUpdate","_updateBatchableMesh","transform","groupTransform","setTexture","_texture","roundPixels","addToBatch","bindGroup","groupBlendMode","updateElement","_tileTransform","anchor","x","y","_initTilingSpriteData","gpuData","renderableData","addressMode","frame","applyAnchorToTexture","shared","copyFrom","scale","array","index","applyMatrix","setUvs","setPositions","_nonPowOf2wrapping","WEBGL","context","supports","nonPowOf2wrapping","isSimple","isPowerOfTwo","CanvasPipes","updateTextBounds","batchableSprite","text","bounds","padding","_style","_getFinalPadding","_anchor","paddingOffset","_x","paddingOffsetY","_y","minX","minY","maxX","maxY","_MeshGeometry","args","defaultOptions","shrinkBuffersToFit","attributes","aPosition","aUV","INDEX","topology","batchMode","BatchableHTMLText","BatchableSprite","generatingTexture","currentKey","runners","resolutionChange","_autoResolution","onViewUpdate","htmlText","getReferenceCount","returnTexturePromise","texturePromise","decreaseReferenceCount","remove","HTMLTextPipe","gpuText","_getGpuText","newKey","styleKey","batchableHTMLText","_didTextUpdate","_updateGpuText","catch","e","console","error","oldTexturePromise","_resolution","getTexturePromise","finally","renderGroup","parentRenderGroup","structureDidChange","initGpuText","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","setAttribute","overflow","appendChild","image","get","createImage","src","canvasAndContext","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_activeTextures","_createCanvas","WEBGPU","getTexture","getManagedTexture","textKey","_increaseReferenceCount","promise","_buildTexturePromise","then","usageCount","activeTexture","_cleanUp","warn","textureStyle","htmlTextData","fontFamilies","fontFamily","dedupe","matches","match","addFontFamily","fontFamily2","Array","isArray","forEach","split","trim","tagStyles","extractFontFamilies","fontCSS","async","fontPromises","filter","Cache","has","map","entries","promises","entry","url","out","faces","face","weight","dataSrc","response","fetch","blob","reader","FileReader","Promise","resolve","reject","onloadend","result","onerror","readAsDataURL","loadFontAsBase64","fontWeight","fontStyle","loadFontCSS","all","css","getFontCss","measured","fontStyleCSS","htmlTextRenderData","innerHTML","cssStyle","textContent","body","contentBounds","getBoundingClientRect","doublePadding","measureHtmlText","ceil","svgURL","toString","XMLSerializer","serializeToString","getSVGUrl","delay","resolve2","setTimeout","onload","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","test","isSafari","resource","CanvasPool","getOptimalCanvasAndContext","clearRect","drawImage","getTemporaryCanvasFromImage","getPo2TextureFromSource","canvas","initSource","returnCanvasAndContext","return","TexturePool","returnTexture","uploadMethodId","WebGLSystem","WebGPUSystem","CanvasSystem","ResizePlugin","init","Object","defineProperty","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","window","innerWidth","innerHeight","clientWidth","clientHeight","render","resizeTo","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","LOW","stop","start","Ticker","oldTicker","batcherName","attributeSize","indexSize","packAsQuad","_attributeStart","_batch","color","reset","_PlaneGeometry","deprecation","verticesX","verticesY","build","total","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","PlaneGeometry","_NineSliceGeometry","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","_anchorX","_anchorY","updateUvs","updatePositions","p","w","scaleW","h","scaleH","min","anchorOffsetX","anchorOffsetY","getBuffer","_uvw","_uvh","NineSliceGeometry","NineSliceSpriteGpuData","NineSliceSpritePipe","sprite","gpuSprite","_getGpuSprite","_updateBatchableSprite","_initGPUSprite","indexOffset","attributeOffset","_textureMatrixUpdateId","_uvUpdateId","_topology","uvBuffer","transformedUvs","_transformedUvs","_updateID","multiplyUvs","tempBounds","getOptimalTexture","alphaMode","emit","end","localUniformBitGroup2","replace","localUniformBitGl","BatchableText","canvasText","CanvasTextPipe","batchableText","_internalCanvas","_internalContext","checkRow","checkColumn","top","bottom","getCanvasBoundingBox","output","createCanvas","getContext","willReadFrequently","globalCompositeOperation","globalAlpha","ensureInternalCanvas","TypeError","getImageData","left","right","Rectangle","strokeRect","tempRect","CanvasTextGenerator","getCanvasAndContext","CanvasTextMetrics","measureText","_renderTextToCanvas","font","fontStringFromTextStyle","lines","lineHeight","lineWidths","maxLineWidth","fontProperties","resetTransform","textBaseline","_stroke","strokeStyle","lineWidth","miterLimit","lineJoin","lineCap","cap","linePositionX","linePositionY","passesCount","dropShadow","isShadowPass","dsOffsetText","dsOffsetShadow","fillStyle","shadowOptions","dropShadowColor","dropShadowAlpha","alpha","shadowColor","setValue","setAlpha","toRgbaString","dropShadowBlur","blur","dropShadowDistance","distance","shadowBlur","shadowOffsetX","cos","angle","shadowOffsetY","sin","_fill","getCanvasFillStyle","strokePadding","linePositionYShift","fontSize","strokeWidth","i2","ascent","align","_drawLetterSpacing","isStroke","letterSpacing","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","experimentalLetterSpacing","textLetterSpacing","strokeText","fillText","currentPosition","stringArray","graphemeSegmenter","previousWidth","currentWidth","currentChar","textStr","CanvasTextSystem","_textKey","TextStyle","pad","filters","filteredTexture","_applyFilters","renderTextToCanvas","currentRenderTarget","renderTarget","resultTexture","generateFilteredTexture","color32BitToUniform","abgr","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","maxTextures","uDistance","colorBit","generateTextureBatchBit","batchSamplers","getBatchSamplersUniformGroup","BitmapTextGraphics","Graphics","customShader","BitmapTextPipe","bitmapText","graphicsRenderable","_getGpuBitmapText","graphics","syncWithProxy","_updateContext","_updateDistanceField","proxyGraphics","bitmapFont","BitmapFontManager","getFont","clear","distanceField","limits","maxBatchableTextures","chars","currentY","baseLineOffset","bitmapTextLayout","getBitmapTextLayout","offsetY","translate","tint","applyFillAsTint","fontMetrics","line","charPositions","char","charData","round","xOffset","yOffset","orig","proxyRenderable","dynamicFont","dx","sqrt","dy","worldScale","abs","fontScale","baseRenderedFontSize","range","proxy","groupColor","globalDisplayStatus","localDisplayStatus","groupAlpha","MeshGpuData","MeshPipe","localUniformsBindGroup","BindGroup","_adaptor","mesh","meshData","_getMeshData","wasBatched","batched","isBatched","_geometry","vertexSize","_getBatchableMesh","gpuBatchableMesh","isRenderable","_a","_b","_initMeshData","_initBatchableMesh","gpuMesh","FilterPipe","filterEffect","renderPipeId","canBundle","action","pop","_filterEffect","_container","instruction","tempProjectionMatrix","quadGeometry","FilterData","skip","inputTexture","backTexture","Bounds","blendRequired","outputRenderSurface","globalFrame","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","uInputSize","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","activeBackTexture","_activeFilterData","filterData","_pushFilterData","renderSurface","colorTextureSource","colorTexture","rootResolution","rootAntialias","antialias","_calculateFilterArea","_calculateFilterBounds","rootViewPort","previousFilterData","_getPreviousFilterData","globalResolution","_findFilterResolution","offsetX","_calculateGlobalFrame","_setupFilterTextures","addRect","rectangle","finishRenderPass","_applyFiltersToTexture","outputTexture","_popFilterData","getBackTexture","lastRenderSurface","previousBounds","backgroundResolution","floor","copyToTexture","applyFilter","input","isFinalTarget","rootRenderTarget","_findPreviousFilterOffset","_updateFilterUniforms","_setupBindGroupsAndRender","calculateSpriteMatrix","outputMatrix","mappedMatrix","cacheToLocalTransform","batchUniforms","getUboResource","setResource","getRenderTarget","sourceWidth","sourceHeight","outputFrame","inputSize","inputPixel","inputClamp","pixelWidth","pixelHeight","rootTexture","isRoot","currentIndex","lastIndex","prevFilterData","renderables","actualMatrix","isCachedAsTexture","textureOffsetInverseTransform","append","_parentCacheAsTextureRenderGroup","inverseWorldTransform","addBounds","getGlobalRenderableBounds","filterArea","getFastGlobalBounds","filterFrameTransform","apply","flip","tempTexture","flop","t","viewPort","paddingMultiplier","Infinity","enabled","clipToViewport","compatibleRenderers","backBuffer","useBackBuffer","fitBounds","isPositive","GraphicsGpuData","batches","GraphicsPipe","contextChange","gpuContext","graphicsContext","updateGpuContext","isBatchable","_rebuild","_addToBatcher","_getGpuDataForRenderable","getGpuContext","_updateBatchesForRenderable","batchPipe","_initGpuDataForRenderable","batchClone","BatchableGraphics","GraphicsContextSystem"],"sourceRoot":""}